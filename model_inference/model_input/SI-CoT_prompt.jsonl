{"task_id": "mux2to1v", "instruction": "Implement the Verilog module based on the following description. Assume that signals are positive clock/clk edge triggered unless otherwise stated.\nCreate a 2-1 multiplexer. When sel=0, choose a. When sel=1, choose b.\nmodule top_module (\n\tinput [99:0] a,\n\tinput [99:0] b,\n\tinput sel,\n\toutput [99:0] out);\n"}
{"task_id": "m2014_q6b", "instruction": "Implement the Verilog module based on the following description. Assume that signals are positive clock/clk edge triggered unless otherwise stated.\nConsider the state machine shown below:\n\nThe state machine has the following states and their corresponding outputs: \n1. state A (Y2 = 0).\n2. state B (Y2 = 0).\n3. state C (Y2 = 0).\n4. state D (Y2 = 0).\n5. state E (Y2 = 1).\n6. state F (Y2 = 1).\n\nState transitions:\n1. From state A: If w = 0, then transition to state B. If w = 1, then transition to state A.\n2. From state B: If w = 0, then transition to state C. If w = 1, then transition to state D.\n3. From state C: If w = 0, then transition to state E. If w = 1, then transition to state D.\n4. From state D: If w = 0, then transition to state F. If w = 1, then transition to state A.\n5. From state E: If w = 0, then transition to state E. If w = 1, then transition to state D.\n6. From state F: If w = 0, then transition to state C. If w = 1, then transition to state D.\n\nAssume that you want to Implement the FSM using three flip-flops and state codes y[3:1] = 000, 001, ..., 101 for states A, B, ..., F, respectively. Implement just the next-state logic for y[2] in Verilog. The output Y2 is y[2].\n\nmodule top_module(\n        input [3:1] y,\n        input w,\n        output reg Y2);"}
{"task_id": "ringer", "instruction": "Implement the Verilog module based on the following description. Assume that signals are positive clock/clk edge triggered unless otherwise stated.\nSuppose you are designing a circuit to control a cellphone's ringer and vibration motor. Whenever the phone needs to ring from an incoming call (input ring), your circuit must either turn on the ringer (output ringer = 1) or the motor (output motor = 1), but not both. If the phone is in vibrate mode (input vibrate_mode = 1), turn on the motor. Otherwise, turn on the ringer.\nmodule top_module(\n\tinput ring, \n\tinput vibrate_mode,\n\toutput ringer,\n\toutput motor);\n"}
{"task_id": "alwaysblock1", "instruction": "Implement the Verilog module based on the following description. Assume that signals are positive clock/clk edge triggered unless otherwise stated.\nBuild an AND gate using both an assign statement and a combinational always block. \nmodule top_module(\n\tinput a, \n\tinput b,\n\toutput out_assign,\n\toutput reg out_alwaysblock);\n"}
{"task_id": "zero", "instruction": "Implement the Verilog module based on the following description. Assume that signals are positive clock/clk edge triggered unless otherwise stated.\nBuild a circuit that always outputs a LOW.\nmodule top_module(\n\toutput zero);\n"}
{"task_id": "circuit7", "instruction": "Implement the Verilog module based on the following description. Assume that signals are positive clock/clk edge triggered unless otherwise stated.\nThis is a sequential circuit. Read the simulation waveforms to determine what the circuit does, then implement it.\n\nTime 0ns: clk = 0, a = x, q = x.\nTime 5ns: clk = 1, a = 0, q = x.\nTime 10ns: clk = 0, a = 0, q = x.\nTime 15ns: clk = 1, a = 0, q = 1.\nTime 20ns: clk = 0, a = 0, q = 1.\nTime 25ns: clk = 1, a = 0, q = 1.\nTime 30ns: clk = 0, a = 0, q = 1.\nTime 35ns: clk = 1, a = 1, q = 1.\nTime 40ns: clk = 0, a = 1, q = 1.\nTime 45ns: clk = 1, a = 1, q = 0.\nTime 50ns: clk = 0, a = 1, q = 0.\nTime 55ns: clk = 1, a = 1, q = 0.\nTime 60ns: clk = 0, a = 1, q = 0.\nTime 65ns: clk = 1, a = 1, q = 0.\nTime 70ns: clk = 0, a = 1, q = 0.\nTime 75ns: clk = 1, a = 1, q = 0.\nTime 80ns: clk = 0, a = 1, q = 0.\nTime 85ns: clk = 1, a = 1, q = 0.\nTime 90ns: clk = 0, a = 1, q = 0.\n\nmodule top_module (\n\tinput clk,\n\tinput a, \n\toutput reg q);\n"}
{"task_id": "ece241_2014_q5a", "instruction": "Implement the Verilog module based on the following description. Assume that signals are positive clock/clk edge triggered unless otherwise stated.\nYou are to design a one-input one-output serial 2's complementer Moore state machine. The input (x) is a series of bits (one per clock cycle) beginning with the least-significant bit of the number, and the output (Z) is the 2's complement of the input. The machine will accept input numbers of arbitrary length. The circuit requires a positive edge triggered asynchronous reset. The conversion begins when Reset is released and stops when Reset is asserted.\nmodule top_module (\n\tinput clk,\n\tinput areset,\n\tinput x,\n\toutput z);\n"}
{"task_id": "fsm3", "instruction": "Implement the Verilog module based on the following description. Assume that signals are positive clock/clk edge triggered unless otherwise stated.\nThe following is the state transition table for a Moore state machine with one input, one output, and four states. Implement this state machine. Include a positive edge triggered asynchronous reset that resets the FSM to state A.\n \nThe state machine has the following states and their corresponding outputs: \n1. state A (out = 0).\n2. state B (out = 0).\n3. state C (out = 0).\n4. state D (out = 1).\n\nState transitions:\n1. From state A: If in = 0, then transition to state A. If in = 1, then transition to state B.\n2. From state B: If in = 0, then transition to state C. If in = 1, then transition to state B.\n3. From state C: If in = 0, then transition to state A. If in = 1, then transition to state D.\n4. From state D: If in = 0, then transition to state C. If in = 1, then transition to state B.\n\nmodule top_module (\n        input clk,\n        input in,\n        input areset,\n        output reg out);"}
{"task_id": "vector2", "instruction": "Implement the Verilog module based on the following description. Assume that signals are positive clock/clk edge triggered unless otherwise stated.\nBuild a circuit that reverses the byte order of a 32-bit vector.\nmodule top_module (\n\tinput [31:0] in,\n\toutput [31:0] out);\n"}
{"task_id": "m2014_q4c", "instruction": "Implement the Verilog module based on the following description. Assume that signals are positive clock/clk edge triggered unless otherwise stated.\nImplement a simple D flip flop with active high synchronous reset (reset output to 0).\nmodule top_module (\n\tinput clk,\n\tinput d,\n\tinput r,\n\toutput reg q);\n"}
{"task_id": "mt2015_q4a", "instruction": "Implement the Verilog module based on the following description. Assume that signals are positive clock/clk edge triggered unless otherwise stated.\nImplement the boolean function z = (x^y) & x.\nmodule top_module(\n\tinput x,\n\tinput y,\n\toutput z);\n"}
{"task_id": "shift18", "instruction": "Implement the Verilog module based on the following description. Assume that signals are positive clock/clk edge triggered unless otherwise stated.\nBuild a 64-bit arithmetic shift register, with synchronous load. The shifter can shift both left and right, and by 1 or 8 bit positions, selected by \"amount.\" Assume the right shit is an arithmetic right shift. \n\n// Signals are defined as below:\n// (1) load: Loads shift register with data[63:0] instead of shifting. Active high.\n// (2) ena: Chooses whether to shift. Active high. \n// (3) amount: Chooses which direction and how much to shift. \n//     (a) 2'b00: shift left by 1 bit. \n//     (b) 2'b01: shift left by 8 bits. \n//     (c) 2'b10: shift right by 1 bit. \n//     (d) 2'b11: shift right by 8 bits. \n// (4) q: The contents of the shifter.\nmodule top_module(\n\tinput clk,\n\tinput load,\n\tinput ena,\n\tinput [1:0] amount,\n\tinput [63:0] data,\n\toutput reg [63:0] q);\n"}
{"task_id": "ece241_2013_q8", "instruction": "Implement the Verilog module based on the following description. Assume that signals are positive clock/clk edge triggered unless otherwise stated.\nImplement a Mealy-type finite state machine that recognizes the sequence \"101\" on an input signal named x. Your FSM should have an output signal, z, that is asserted to logic-1 when the \"101\" sequence is detected. Your FSM should also have a negative edge triggered asynchronous reset. You may only have 3 states in your state machine. Your FSM should recognize overlapping sequences.\nmodule top_module (\n\tinput clk,\n\tinput aresetn,\n\tinput x,\n\toutput reg z);\n"}
{"task_id": "m2014_q6", "instruction": "Implement the Verilog module based on the following description. Assume that signals are positive clock/clk edge triggered unless otherwise stated.\nConsider the state machine shown below:\n\nThe state machine has the following states and their corresponding outputs: \n1. state A (z = 0).\n2. state B (z = 0).\n3. state C (z = 0).\n4. state D (z = 0).\n5. state E (z = 1).\n6. state F (z = 1).\n\nState transitions:\n1. From state A: If w = 0, then transition to state B. If w = 1, then transition to state A.\n2. From state B: If w = 0, then transition to state C. If w = 1, then transition to state D.\n3. From state C: If w = 0, then transition to state E. If w = 1, then transition to state D.\n4. From state D: If w = 0, then transition to state F. If w = 1, then transition to state A.\n5. From state E: If w = 0, then transition to state E. If w = 1, then transition to state D.\n6. From state F: If w = 0, then transition to state C. If w = 1, then transition to state D.\n\nImplement this state machine in Verilog.\n\nmodule top_module (\n        input clk,\n        input reset,\n        input w,\n        output reg z);"}
{"task_id": "fsm_ps2data", "instruction": "Implement the Verilog module based on the following description. Assume that signals are positive clock/clk edge triggered unless otherwise stated.\nWe want a finite state machine that will search for message boundaries when given an input byte stream. The algorithm we'll use is to discard bytes until we see one with in[3]=1. We then assume that this is byte 1 of a message, and signal the receipt of a message once all 3 bytes have been received (done). The FSM should signal done in the cycle immediately after the third byte of each message was successfully received.\n\n// Implement the datapath module that will output the 24-bit (3 byte) message whenever a packet is received (out_bytes[23:16] is the first byte, out_bytes[15:8] is the second byte, etc.). The reset signal is active high synchronous. out_bytes needs to be valid whenever the done signal is asserted. You may output anything at other times (i.e., don't-care). \n\n// Waveform example:\nTime 0ns: clk = 0, reset = 1, in[7:0] = 0, done = x, out_bytes = x.\nTime 5ns: clk = 1, reset = 1, in[7:0] = 0, done = 0, out_bytes = x.\nTime 10ns: clk = 0, reset = 1, in[7:0] = 0, done = 0, out_bytes = x.\nTime 15ns: clk = 1, reset = 0, in[7:0] = 2c, done = 0, out_bytes = x.\nTime 20ns: clk = 0, reset = 0, in[7:0] = 2c, done = 0, out_bytes = x.\nTime 25ns: clk = 1, reset = 0, in[7:0] = 81, done = 0, out_bytes = x.\nTime 30ns: clk = 0, reset = 0, in[7:0] = 81, done = 0, out_bytes = x.\nTime 35ns: clk = 1, reset = 0, in[7:0] = 9, done = 0, out_bytes = x.\nTime 40ns: clk = 0, reset = 0, in[7:0] = 9, done = 0, out_bytes = x.\nTime 45ns: clk = 1, reset = 0, in[7:0] = 6b, done = 1, out_bytes = 2c8109.\nTime 50ns: clk = 0, reset = 0, in[7:0] = 6b, done = 1, out_bytes = 2c8109.\nTime 55ns: clk = 1, reset = 0, in[7:0] = d, done = 0, out_bytes = x.\nTime 60ns: clk = 0, reset = 0, in[7:0] = d, done = 0, out_bytes = x.\nTime 65ns: clk = 1, reset = 0, in[7:0] = 8d, done = 0, out_bytes = x.\nTime 70ns: clk = 0, reset = 0, in[7:0] = 8d, done = 0, out_bytes = x.\nTime 75ns: clk = 1, reset = 0, in[7:0] = 6d, done = 1, out_bytes = 6b0d8d.\nTime 80ns: clk = 0, reset = 0, in[7:0] = 6d, done = 1, out_bytes = 6b0d8d.\nTime 85ns: clk = 1, reset = 0, in[7:0] = 12, done = 0, out_bytes = x.\nTime 90ns: clk = 0, reset = 0, in[7:0] = 12, done = 0, out_bytes = x.\nTime 95ns: clk = 1, reset = 0, in[7:0] = 1, done = 0, out_bytes = x.\nTime 100ns: clk = 0, reset = 0, in[7:0] = 1, done = 0, out_bytes = x.\nTime 105ns: clk = 1, reset = 0, in[7:0] = d, done = 1, out_bytes = 6d1201.\nTime 110ns: clk = 0, reset = 0, in[7:0] = d, done = 1, out_bytes = 6d1201.\nTime 115ns: clk = 1, reset = 0, in[7:0] = 76, done = 0, out_bytes = x.\nTime 120ns: clk = 0, reset = 0, in[7:0] = 76, done = 0, out_bytes = x.\nTime 125ns: clk = 1, reset = 0, in[7:0] = 3d, done = 0, out_bytes = x.\nTime 130ns: clk = 0, reset = 0, in[7:0] = 3d, done = 0, out_bytes = x.\nTime 135ns: clk = 1, reset = 0, in[7:0] = ed, done = 1, out_bytes = d763d.\nTime 140ns: clk = 0, reset = 0, in[7:0] = ed, done = 1, out_bytes = d763d.\nTime 145ns: clk = 1, reset = 0, in[7:0] = 8c, done = 0, out_bytes = x.\nTime 150ns: clk = 0, reset = 0, in[7:0] = 8c, done = 0, out_bytes = x.\nTime 155ns: clk = 1, reset = 0, in[7:0] = f9, done = 0, out_bytes = x.\nTime 160ns: clk = 0, reset = 0, in[7:0] = f9, done = 0, out_bytes = x.\nTime 165ns: clk = 1, reset = 0, in[7:0] = ce, done = 1, out_bytes = ed8cf9.\nTime 170ns: clk = 0, reset = 0, in[7:0] = ce, done = 1, out_bytes = ed8cf9.\nTime 175ns: clk = 1, reset = 0, in[7:0] = c5, done = 0, out_bytes = x.\nTime 180ns: clk = 0, reset = 0, in[7:0] = c5, done = 0, out_bytes = x.\nTime 185ns: clk = 1, reset = 0, in[7:0] = aa, done = 0, out_bytes = x.\nTime 190ns: clk = 0, reset = 0, in[7:0] = aa, done = 0, out_bytes = x.\n\nmodule top_module (\n\tinput clk,\n\tinput [7:0] in,\n\tinput reset,\n\toutput reg [23:0] out_bytes,\n\toutput reg done);\n"}
{"task_id": "2012_q2b", "instruction": "Implement the Verilog module based on the following description. Assume that signals are positive clock/clk edge triggered unless otherwise stated.\nConsider the state machine shown below:\n\nThe state machine has the following states and their corresponding outputs: \n1. state A (output 0).\n2. state B (output 0).\n3. state C (output 0).\n4. state D (output 0).\n5. state E (output 1).\n6. state F (output 1).\n\nState transitions:\n1. From state A: If w = 1, then transition to state B. If w = 0, then transition to state A.\n2. From state B: If w = 1, then transition to state C. If w = 0, then transition to state D.\n3. From state C: If w = 1, then transition to state E. If w = 0, then transition to state D.\n4. From state D: If w = 1, then transition to state F. If w = 0, then transition to state A.\n5. From state E: If w = 1, then transition to state E. If w = 0, then transition to state D.\n6. From state F: If w = 1, then transition to state C. If w = 0, then transition to state D.\n\nAssume that a one-hot code is used with the state assignment y[5:0] = 000001(A), 000010(B), 000100(C), 001000(D), 010000(E), 100000(F) \n\nWrite a Verilog for the signal Y1, which is the input of state flip-flop y[1], for the signal Y3, which is the input of state flip-flop y[3]. Derive the Verilog by inspection assuming a one-hot encoding.\n\nmodule top_module (\n        input [5:0] y,\n        input w,\n        output reg Y1,\n        output reg Y3);"}
{"task_id": "vector0", "instruction": "Implement the Verilog module based on the following description. Assume that signals are positive clock/clk edge triggered unless otherwise stated.\nBuild a circuit that has one 3-bit input, then outputs the same vector, and also splits it into three separate 1-bit outputs. Connect output o0 to the input vector's position 0, o1 to position 1, etc.\nmodule top_module(\n\tinput [2:0] vec, \n\toutput [2:0] outv,\n\toutput o2,\n\toutput o1,\n\toutput o0);\n"}
{"task_id": "kmap4", "instruction": "Implement the Verilog module based on the following description. Assume that signals are positive clock/clk edge triggered unless otherwise stated.\nImplement the circuit described by the Karnaugh map below.\n\nIf abcd is 0000, then out is 0.\nIf abcd is 0100, then out is 1.\nIf abcd is 1100, then out is 0.\nIf abcd is 1000, then out is 1.\nIf abcd is 0001, then out is 1.\nIf abcd is 0101, then out is 0.\nIf abcd is 1101, then out is 1.\nIf abcd is 1001, then out is 0.\nIf abcd is 0011, then out is 0.\nIf abcd is 0111, then out is 1.\nIf abcd is 1111, then out is 0.\nIf abcd is 1011, then out is 1.\nIf abcd is 0010, then out is 1.\nIf abcd is 0110, then out is 0.\nIf abcd is 1110, then out is 1.\nIf abcd is 1010, then out is 0.\n\nmodule top_module (\n\tinput a, \n\tinput b,\n\tinput c,\n\tinput d,\n\toutput reg out);\n"}
{"task_id": "vector1", "instruction": "Implement the Verilog module based on the following description. Assume that signals are positive clock/clk edge triggered unless otherwise stated.\nBuild a combinational circuit that splits an input half-word (16 bits, [15:0] ) into lower [7:0] and upper [15:8] bytes.\nmodule top_module (\n\tinput [15:0] in,\n\toutput [7:0] out_hi,\n\toutput [7:0] out_lo);\n"}
{"task_id": "norgate", "instruction": "Implement the Verilog module based on the following description. Assume that signals are positive clock/clk edge triggered unless otherwise stated.\nCreate a module that implements a NOR gate.\nmodule top_module(\n\tinput a, \n\tinput b,\n\toutput out);\n"}
{"task_id": "alwaysblock2", "instruction": "Implement the Verilog module based on the following description. Assume that signals are positive clock/clk edge triggered unless otherwise stated.\nBuild an XOR gate three ways, using an assign statement (output out_assign), a combinational always block (output out_always_comb), and a clocked always block (output out_always_ff). Note that the clocked always block produces a different circuit from the other two: There is a flip-flop so the output is delayed.\nmodule top_module(\n\tinput clk,\n\tinput a, \n\tinput b,\n\toutput out_assign,\n\toutput reg out_always_comb,\n\toutput reg out_always_ff);\n"}
{"task_id": "m2014_q6c", "instruction": "Implement the Verilog module based on the following description. Assume that signals are positive clock/clk edge triggered unless otherwise stated.\nConsider the state machine shown below:\n\nThe state machine has the following states and their corresponding outputs: \n1. state A (output 0).\n2. state B (output 0).\n3. state C (output 0).\n4. state D (output 0).\n5. state E (output 1).\n6. state F (output 1).\n\nState transitions:\n1. From state A: If w = 0, then transition to state B. If w = 1, then transition to state A.\n2. From state B: If w = 0, then transition to state C. If w = 1, then transition to state D.\n3. From state C: If w = 0, then transition to state E. If w = 1, then transition to state D.\n4. From state D: If w = 0, then transition to state F. If w = 1, then transition to state A.\n5. From state E: If w = 0, then transition to state E. If w = 1, then transition to state D.\n6. From state F: If w = 0, then transition to state C. If w = 1, then transition to state D.\n\nResets into state A. For this part, assume that a one-hot code is used with the state assignment y[6:1] = 000001, 000010, 000100, 001000, 010000, 100000 for states A, B,..., F, respectively.\n\nWrite Verilog for the next-state signals Y2 and Y4 corresponding to signal y[2] and y[4]. Derive the logic equations by inspection assuming a one-hot encoding.\nmodule top_module (\n        input [6:1] y,\n        input w,\n        output reg Y2,\n        output reg Y4);"}
{"task_id": "mux256to1", "instruction": "Implement the Verilog module based on the following description. Assume that signals are positive clock/clk edge triggered unless otherwise stated.\nCreate a 1-bit wide, 256-to-1 multiplexer. The 256 inputs are all packed into a single 256-bit input vector. sel=0 should select in[0], sel=1 selects bits in[1], sel=2 selects bits in[2], etc.\nmodule top_module (\n\tinput [255:0] in,\n\tinput [7:0] sel,\n\toutput  out);\n"}
{"task_id": "2014_q4a", "instruction": "Implement the Verilog module based on the following description. Assume that signals are positive clock/clk edge triggered unless otherwise stated.\nConsider an n-bit shift register circuit. Inputs E are for enabling shift, R for value to load, L is asserted when it should load, and w is the input to the first stage of the shift register. Write a Verilog module named top_module for one stage of this circuit, including both the flip-flop and multiplexers.\nmodule top_module (\n\tinput clk,\n\tinput w,\n\tinput R,\n\tinput E,\n\tinput L,\n\toutput reg Q);\n"}
{"task_id": "ece241_2014_q4", "instruction": "Implement the Verilog module based on the following description. Assume that signals are positive clock/clk edge triggered unless otherwise stated.\nGiven the finite state machine circuit described below, assume that the D flip-flops are initially reset to zero before the machine begins.\n\n// Build this circuit in Verilog.\n\n// Input x goes to three different two-input gates: a XOR, an AND, and a OR gate. Each of the three gates is connected to the input of a D flip-flop and then the flip-flop outputs all go to a three-input XNOR, whose output is Z. The second input of the XOR is its corresponding flip-flop's output, the second input of the AND is its corresponding flip-flop's complemented output, and finally the second input of the OR is its corresponding flip-flop's complementary output.\nmodule top_module (\n\tinput clk,\n\tinput x,\n\toutput z);\n"}
{"task_id": "circuit4", "instruction": "Implement the Verilog module based on the following description. Assume that signals are positive clock/clk edge triggered unless otherwise stated.\nThis is a combinational circuit. Read the simulation waveforms to determine what the circuit does, then implement it.\n\nIf a = 0, b = 1, c = 0, d = 1, then q = 1.\nIf a = 1, b = 0, c = 1, d = 1, then q = 1.\nIf a = 0, b = 0, c = 0, d = 1, then q = 0.\nIf a = 0, b = 0, c = 1, d = 1, then q = 1.\nIf a = 1, b = 0, c = 0, d = 1, then q = 0.\nIf a = 1, b = 0, c = 1, d = 0, then q = 1.\nIf a = 1, b = 1, c = 1, d = 0, then q = 1.\nIf a = 1, b = 1, c = 0, d = 0, then q = 1.\nIf a = 0, b = 1, c = 1, d = 0, then q = 1.\nIf a = 1, b = 0, c = 0, d = 0, then q = 0.\nIf a = 0, b = 0, c = 1, d = 0, then q = 1.\nIf a = 0, b = 1, c = 0, d = 0, then q = 1.\nIf a = 1, b = 1, c = 0, d = 1, then q = 1.\nIf a = 1, b = 1, c = 1, d = 1, then q = 1.\nIf a = 0, b = 0, c = 0, d = 0, then q = 0.\nIf a = 0, b = 1, c = 1, d = 1, then q = 1.\n\nmodule top_module (\n\tinput a, \n\tinput b, \n\tinput c, \n\tinput d,\n\toutput reg q);\n"}
{"task_id": "rule110", "instruction": "Implement the Verilog module based on the following description. Assume that signals are positive clock/clk edge triggered unless otherwise stated.\nRule 110 is a one-dimensional cellular automaton with interesting properties (such as being Turing-complete). There is a one-dimensional array of cells (on or off). At each time step, the state of each cell changes. In Rule 110, the next state of each cell depends only on itself and its two neighbours, according to the following table:\n\nThe cells have two states:\n1. on (1)\n2. off (0)\n\nState transitions:\n1. If Center = 1: \n    1.1 If Left neighbour = 1 and Right neighbour = 1, then Center's next state = 0.\n    1.2 If Left neighbour = 1 and Right neighbour = 0, then Center's next state = 1.\n    1.3 If Left neighbour = 0 and Right neighbour = 1, then Center's next state = 1.\n    1.4 If Left neighbour = 0 and Right neighbour = 0, then Center's next state = 1.\n2. If Center = 0:\n    2.1 If Left neighbour = 1 and Right neighbour = 1, then Center's next state = 1.\n    2.2 If Left neighbour = 1 and Right neighbour = 0, then Center's next state = 0.\n    2.3 If Left neighbour = 0 and Right neighbour = 1, then Center's next state = 1.\n    2.4 If Left neighbour = 0 and Right neighbour = 0, then Center's next state = 0.\n\nIn this circuit, create a 512-cell system (q[511:0]), and advance by one time step each clock cycle. The synchronous active high load input indicates the state of the system should be loaded with data[511:0]. Assume the boundaries (q[-1] and q[512]) are both zero (off). \nmodule top_module (\n  input clk,\n  input load,\n  input [511:0] data,\n  output reg [511:0] q);"}
{"task_id": "fsm3s", "instruction": "Implement the Verilog module based on the following description. Assume that signals are positive clock/clk edge triggered unless otherwise stated.\nThe following is the state transition table for a Moore state machine with one input, one output, and four states. Implement this state machine. Include a synchronous active high reset that resets the FSM to state A.\n\nThe state machine has the following states and their corresponding outputs: \n1. state A (out = 0).\n2. state B (out = 0).\n3. state C (out = 0).\n4. state D (out = 1).\n\nState transitions:\n1. From state A: If in = 0, then transition to state A. If in = 1, then transition to state B.\n2. From state B: If in = 0, then transition to state C. If in = 1, then transition to state B.\n3. From state C: If in = 0, then transition to state A. If in = 1, then transition to state D.\n4. From state D: If in = 0, then transition to state C. If in = 1, then transition to state B.\n\nmodule top_module (\n        input clk,\n        input in,\n        input reset,\n        output reg out);\n"}
{"task_id": "circuit5", "instruction": "Implement the Verilog module based on the following description. Assume that signals are positive clock/clk edge triggered unless otherwise stated.\nThis is a combinational circuit. Read the simulation waveforms to determine what the circuit does, then implement it.\n\nIf a = a, b = b, c = e, d = d, e = e, then q = f.\nIf a = a, b = b, c = f, d = d, e = e, then q = f.\nIf a = a, b = b, c = 4, d = d, e = e, then q = f.\nIf a = a, b = b, c = 9, d = d, e = e, then q = f.\nIf a = a, b = b, c = a, d = d, e = e, then q = f.\nIf a = a, b = b, c = d, d = d, e = e, then q = f.\nIf a = a, b = b, c = 0, d = d, e = e, then q = b.\nIf a = a, b = b, c = c, d = d, e = e, then q = f.\nIf a = a, b = b, c = 1, d = d, e = e, then q = e.\nIf a = a, b = b, c = 5, d = d, e = e, then q = f.\nIf a = a, b = b, c = b, d = d, e = e, then q = f.\nIf a = a, b = b, c = 2, d = d, e = e, then q = a.\nIf a = a, b = b, c = 7, d = d, e = e, then q = f.\nIf a = a, b = b, c = 6, d = d, e = e, then q = f.\nIf a = a, b = b, c = 3, d = d, e = e, then q = d.\nIf a = a, b = b, c = 8, d = d, e = e, then q = f.\n\nmodule top_module (\n\tinput [3:0] a, \n\tinput [3:0] b, \n\tinput [3:0] c, \n\tinput [3:0] d,\n\tinput [3:0] e,\n\toutput reg [3:0] q);\n"}
{"task_id": "bugs_mux2", "instruction": "Implement the Verilog module based on the following description. Assume that signals are positive clock/clk edge triggered unless otherwise stated.\nFind the bug and fix this 8-bit wide 2-to-1 mux.\n\n// module top_module (\n//     input sel,\n//     input [7:0] a,\n//     input [7:0] b,\n//     output out  );\n\n//     assign out = (~sel & a) | (sel & b);\n\n// endmodule\nmodule top_module (\n\tinput sel,\n\tinput [7:0] a,\n\tinput [7:0] b,\n\toutput reg [7:0] out\n);\n"}
{"task_id": "mt2015_muxdff", "instruction": "Implement the Verilog module based on the following description. Assume that signals are positive clock/clk edge triggered unless otherwise stated.\nConsider this Verilog module \"full_module\":\n\n// module full_module (\n//     input [2:0] r,\n//     input L,\n//     input clk,\n//     output reg [2:0] q\n);\n\n// always @(posedge clk) begin\n//     if (L) begin\n//         q <= r;\n//     end else begin\n//         q <= {q[1] ^ q[2], q[0], q[2]};\n//     end\n// end\n\n// endmodule\n\n// You want to create a hierarchical Verilog design where a flipflop and 2-1 multiplexer are in a submodule, and that submodule is instantiated three times in this code. Create the submodule called \"top_module\".\n\nmodule top_module(\n\tinput clk,\n\tinput L,\n\tinput q_in,\n\tinput r_in,\n\toutput reg Q);\n"}
{"task_id": "edgecapture", "instruction": "Implement the Verilog module based on the following description. Assume that signals are positive clock/clk edge triggered unless otherwise stated.\nFor each bit in a 32-bit vector, capture when the input signal changes from 1 in one clock cycle to 0 the next. \"Capture\" means that the output will remain 1 until the register is reset (active high synchronous reset).\nmodule top_module(\n\tinput clk,\n\tinput reset,\n\tinput [31:0] in,\n\toutput reg [31:0] out);\n"}
{"task_id": "dff8", "instruction": "Implement the Verilog module based on the following description. Assume that signals are positive clock/clk edge triggered unless otherwise stated.\nCreate 8 D flip-flops. All DFFs should be triggered by the positive edge of clk.\nmodule top_module(\n\tinput clk,\n\tinput [7:0] d,\n\toutput reg [7:0] q);\n"}
{"task_id": "ece241_2014_q1c", "instruction": "Implement the Verilog module based on the following description. Assume that signals are positive clock/clk edge triggered unless otherwise stated.\nAssume that you have two 8-bit 2's complement numbers, a[7:0] and b[7:0]. These numbers are added to produce s[7:0]. Also compute whether a (signed) overflow has occurred.\nmodule top_module (\n\tinput [7:0] a,\n\tinput [7:0] b,\n\toutput [7:0] s,\n\toutput overflow);\n"}
{"task_id": "review2015_fsmonehot", "instruction": "Implement the Verilog module based on the following description. Assume that signals are positive clock/clk edge triggered unless otherwise stated.\nGiven the following Moore state machine with 3 input (d, done_counting, ack) and 3 outputs (shift_ena, counting, done). Unless otherwise stated in the diagram below, assume outputs are 0 and inputs are don't cares.\n\nThe state machine has the following states and their corresponding outputs: \n1. state S (no output).\n2. state S1 (no output).\n3. state S11 (no output).\n4. state S110 (no output).\n5. state B0 (shift_ena=1).\n6. state B1 (shift_ena=1).\n7. state B2 (shift_ena=1).\n8. state B3 (shift_ena=1).\n9. state Count (counting=1).\n10. state Wait (done=1).\n\nState transitions:\n1. From state S: If d = 0, then transition to state S. If d = 1, then transition to state S1.\n2. From state S1: If d = 0, then transition to state S. If d = 1, then transition to state S11.\n3. From state S11: If d = 0, then transition to state S110. If d = 1, then transition to state S11.\n4. From state S110: If d = 0, then transition to state S. If d = 1, then transition to state B0.\n5. From state B0: always go to next cycle, transition to B1.\n6. From state B1: always go to next cycle, transition to B2.\n7. From state B2: always go to next cycle, transition to B3.\n8. From state B3: always go to next cycle, transition to Count.\n9. From state Count: If not done_counting, then transition to Count. If done_counting, then transition to Wait.\n10. From state Wait: If ack = 0, then transition to state Wait. If ack = 1, then transition to state S.\n\nAt reset, the state machine starts in state \"S\". Derive next-state logic equations and output logic equations by inspection assuming the following one-hot encoding is used: (S, S1, S11, S110, B0, B1, B2, B3, Count, Wait) = (10'b0000000001, 10'b0000000010, 10'b0000000100, ... , 10'b1000000000)\n\nDerive state transition and output logic equations by inspection assuming a one-hot encoding. Implement only the state transition logic and output logic (the combinational logic portion) for this state machine.\n\nWrite code that generates the following equations:\n\n- B3_next -- next-state logic for state B3\n- S_next\n- S1_next\n- Count_next\n- Wait_next\n- done -- output logic\n- counting\n- shift_ena\n\nmodule top_module(\n    input d,\n    input done_counting,\n    input ack,\n    input [9:0] state,    // 10-bit one-hot current state\n    output reg B3_next,\n    output reg S_next,\n    output reg S1_next,\n    output reg Count_next,\n    output reg Wait_next,\n    output reg done,\n    output reg counting,\n    output reg shift_ena\n );"}
{"task_id": "counter_2bc", "instruction": "Implement the Verilog module based on the following description. Assume that signals are positive clock/clk edge triggered unless otherwise stated.\nBuild a two-bit saturating counter. The counter increments (up to a maximum of 3) when train_valid = 1 and train_taken = 1. It decrements (down to a minimum of 0) when train_valid = 1 and train_taken = 0. When not training (train_valid = 0), the counter keeps its value unchanged. areset is a positive edge triggered asynchronous reset that resets the counter to weakly not-taken (2'b01). Output state[1:0] is the two-bit counter value.\nmodule top_module(\n    input clk,\n    input areset,\n    input train_valid,\n    input train_taken,\n    output reg [1:0] state);\n"}
{"task_id": "always_casez", "instruction": "Implement the Verilog module based on the following description. Assume that signals are positive clock/clk edge triggered unless otherwise stated.\nBuild a priority encoder for 8-bit inputs. Given an 8-bit vector, the output should report the first (least significant) bit in the vector that is 1. Report zero if the input vector has no bits that are high. For example, the input 8'b10010000 should output 3'd4, because bit[4] is first bit that is high.\nmodule top_module (\n\tinput [7:0] in,\n\toutput reg [2:0] pos);\n"}
{"task_id": "always_nolatches", "instruction": "Implement the Verilog module based on the following description. Assume that signals are positive clock/clk edge triggered unless otherwise stated.\nSuppose you're building a circuit to process scancodes from a PS/2 keyboard for a game. Given the last two bytes of scancodes received, you need to indicate whether one of the arrow keys on the keyboard have been pressed. This involves a fairly simple mapping, which can be implemented as a case statement (or if-elseif) with four cases.\n// Scancode[15:0] | Arrow key\n// 16'he06b | left arrow\n// 16'he072 | down arrow\n// 16'he074 | right arrow\n// 16'he075 | up arrow\n// Anything else | none\n// Your circuit has one 16-bit input, and four outputs. Build this circuit that recognizes these four scancodes and asserts the correct output.\n\n\nmodule top_module (\n\tinput [15:0] scancode,\n\toutput reg left,\n\toutput reg down,\n\toutput reg right,\n\toutput reg up);\n"}
{"task_id": "m2014_q4j", "instruction": "Implement the Verilog module based on the following description. Assume that signals are positive clock/clk edge triggered unless otherwise stated.\nImplement a 4-bit adder with full adders. The output sum should include the overflow bit.\nmodule top_module (\n\tinput [3:0] x,\n\tinput [3:0] y,\n\toutput [4:0] sum);\n"}
{"task_id": "history_shift", "instruction": "Implement the Verilog module based on the following description. Assume that signals are positive clock/clk edge triggered unless otherwise stated.\nBuild a 32-bit global history shift register, including support for rolling back state in response to a pipeline flush caused by a branch misprediction. When a branch prediction is made (predict_valid = 1), shift in predict_taken from the LSB side to update the branch history for the predicted branch. (predict_history[0] is the direction of the youngest branch.) When a branch misprediction occurs (train_mispredicted = 1), load the branch history register with the history after the completion of the mispredicted branch. This is the history before the mispredicted branch (train_history) concatenated with the actual result of the branch (train_taken). If both a prediction and misprediction occur at the same time, the misprediction takes precedence, because the pipeline flush will also flush out the branch that is currently making a prediction. predict_history is the value of the branch history register. areset is a positive edge triggered asynchronous reset that resets the history counter to zero.\n\n\nmodule top_module\n(\n    input clk,\n    input areset,\n    input predict_valid,\n    input predict_taken,\n    output reg [31:0] predict_history,\n    \n    input train_mispredicted,\n    input train_taken,\n    input [31:0] train_history);\n"}
{"task_id": "wire_decl", "instruction": "Implement the Verilog module based on the following description. Assume that signals are positive clock/clk edge triggered unless otherwise stated.\nImplement the following circuit. Create two intermediate wires (named anything you want) to connect the AND and OR gates together. Note that the wire that feeds the NOT gate is really wire `out`, so you do not necessarily need to declare a third wire here. Notice how wires are driven by exactly one source (output of a gate), but can feed multiple inputs.\n\n// The circuit is composed of two layers. The first layer, counting from the input, is two AND gates: one whose input is connected to a and b, and the second is connected to c and d. The second layer there is an OR gate to OR the two AND outputs, connected the output 'out'. Additionally, there is an inverted output 'out_n'.\nmodule top_module (\n\tinput a,\n\tinput b,\n\tinput c,\n\tinput d,\n\toutput out,\n\toutput out_n );\n"}
{"task_id": "dff", "instruction": "Implement the Verilog module based on the following description. Assume that signals are positive clock/clk edge triggered unless otherwise stated.\nCreate a single D flip-flop.\nmodule top_module(\n\tinput clk,\n\tinput d,\n\toutput reg q);\n"}
{"task_id": "ece241_2013_q12", "instruction": "Implement the Verilog module based on the following description. Assume that signals are positive clock/clk edge triggered unless otherwise stated.\nIn this question, you will design a circuit for an 8x1 memory, where writing to the memory is accomplished by shifting-in bits, and reading is \"random access\", as in a typical RAM. You will then use the circuit to realize a 3-input logic function. First, create an 8-bit shift register with 8 D-type flip-flops. Label the flip-flop outputs from Q[0]...Q[7]. The shift register input should be called S, which feeds the input of Q[0] (MSB is shifted in first). The enable input is synchronous active high and controls whether to shift. Extend the circuit to have 3 additional inputs A,B,C and an output Z. The circuit's behaviour should be as follows: when ABC is 000, Z=Q[0], when ABC is 001, Z=Q[1], and so on. Your circuit should contain ONLY the 8-bit shift register, and multiplexers. \nmodule top_module (\n\tinput clk,\n\tinput enable,\n\tinput S,\n\tinput A,\n\tinput B,\n\tinput C,\n\toutput reg Z);\n"}
{"task_id": "thermostat", "instruction": "Implement the Verilog module based on the following description. Assume that signals are positive clock/clk edge triggered unless otherwise stated.\nA heating/cooling thermostat controls both a heater (during winter) and an air conditioner (during summer). Implement a circuit that will turn on and off the heater, air conditioning, and blower fan as appropriate. The thermostat can be in one of two modes: heating (mode = 1) and cooling (mode = 0). In heating mode, turn the heater on when it is too cold (too_cold = 1) but do not use the air conditioner. In cooling mode, turn the air conditioner on when it is too hot (too_hot = 1), but do not turn on the heater. When the heater or air conditioner are on, also turn on the fan to circulate the air. In addition, the user can also request the fan to turn on (fan_on = 1), even if the heater and air conditioner are off.\nmodule top_module(\n\tinput mode,\n\tinput too_cold, \n\tinput too_hot,\n\tinput fan_on,\n\toutput heater,\n\toutput aircon,\n\toutput fan);\n"}
{"task_id": "ece241_2013_q2", "instruction": "Implement the Verilog module based on the following description. Assume that signals are positive clock/clk edge triggered unless otherwise stated.\nA single-output digital system with four inputs (a,b,c,d) generates a logic-1 when 2, 7, or 15 appears on the inputs, and a logic-0 when 0, 1, 4, 5, 6, 9, 10, 13, or 14 appears. The input conditions for the numbers 3, 8, 11, and 12 never occur in this system. For example, 7 corresponds to a,b,c,d being set to 0,1,1,1, respectively. Determine the output out_sop in minimum sum-of-products form, and the output out_pos in minimum product-of-sums form.\n\n\nmodule top_module (\n\tinput a,\n\tinput b,\n\tinput c,\n\tinput d,\n\toutput out_sop,\n\toutput out_pos);\n"}
{"task_id": "lfsr32", "instruction": "Implement the Verilog module based on the following description. Assume that signals are positive clock/clk edge triggered unless otherwise stated.\nA linear feedback shift register is a shift register usually with a few XOR gates to produce the next state of the shift register. A Galois LFSR is one particular arrangement where bit positions with a \"tap\" are XORed with the output bit to produce each bit's next value, while bit positions without a tap shift. Build a 32-bit Galois LFSR with taps at bit positions 32, 22, 2, and 1. Reset should be active high synchronous, and should reset the output q to 32'h1.\nmodule top_module(\n\tinput clk,\n\tinput reset,\n\toutput reg [31:0] q);\n"}
{"task_id": "circuit3", "instruction": "Implement the Verilog module based on the following description. Assume that signals are positive clock/clk edge triggered unless otherwise stated.\nThis is a combinational circuit. Read the simulation waveforms to determine what the circuit does, then implement it.\n\nIf a = 0, b = 1, c = 0, d = 1, then q = 1.\nIf a = 1, b = 0, c = 1, d = 1, then q = 1.\nIf a = 1, b = 0, c = 0, d = 1, then q = 1.\nIf a = 0, b = 0, c = 0, d = 1, then q = 0.\nIf a = 0, b = 1, c = 0, d = 0, then q = 0.\nIf a = 1, b = 0, c = 1, d = 0, then q = 1.\nIf a = 0, b = 0, c = 1, d = 1, then q = 0.\nIf a = 0, b = 0, c = 1, d = 0, then q = 0.\nIf a = 1, b = 1, c = 1, d = 0, then q = 1.\nIf a = 0, b = 1, c = 1, d = 0, then q = 1.\nIf a = 1, b = 0, c = 0, d = 0, then q = 0.\nIf a = 1, b = 1, c = 0, d = 0, then q = 0.\nIf a = 1, b = 1, c = 0, d = 1, then q = 1.\nIf a = 1, b = 1, c = 1, d = 1, then q = 1.\nIf a = 0, b = 0, c = 0, d = 0, then q = 0.\nIf a = 0, b = 1, c = 1, d = 1, then q = 1.\n\nmodule top_module (\n\tinput a, \n\tinput b, \n\tinput c, \n\tinput d,\n\toutput reg q);\n"}
{"task_id": "7420", "instruction": "Implement the Verilog module based on the following description. Assume that signals are positive clock/clk edge triggered unless otherwise stated.\nThe 7400-series integrated circuits are a series of digital chips with a few gates each. The 7420 is a chip with two 4-input NAND gates.\n\n// Create a module with the same functionality as the 7420 chip. It has 8 inputs and 2 outputs.\nmodule top_module(\n\tinput p1a, \n\tinput p1b, \n\tinput p1c, \n\tinput p1d, \n\toutput p1y, \n\tinput p2a, \n\tinput p2b, \n\tinput p2c, \n\tinput p2d, \n\toutput p2y);\n"}
{"task_id": "popcount255", "instruction": "Implement the Verilog module based on the following description. Assume that signals are positive clock/clk edge triggered unless otherwise stated.\nA \"population count\" circuit counts the number of '1's in an input vector. Build a population count circuit for a 255-bit input vector.\nmodule top_module (\n\tinput [254:0] in,\n\toutput reg [7:0] out);\n"}
{"task_id": "gatesv", "instruction": "Implement the Verilog module based on the following description. Assume that signals are positive clock/clk edge triggered unless otherwise stated.\nYou are given a four-bit input vector in[3:0]. We want to know some relationships between each bit and its neighbour: \n// (1) out_both: Each bit of this output vector should indicate whether both the corresponding input bit and its neighbour to the left (higher index) are '1'. For example, out_both[2] should indicate if in[2] and in[3] are both 1. Since in[3] has no neighbour to the left, the answer is obvious so we don't need to know out_both[3]. \n// (2) out_any: Each bit of this output vector should indicate whether any of the corresponding input bit and its neighbour to the right are '1'. For example, out_any[2] should indicate if either in[2] or in[1] are 1. Since in[0] has no neighbour to the right, the answer is obvious so we don't need to know out_any[0]. \n// (3) out_different: Each bit of this output vector should indicate whether the corresponding input bit is different from its neighbour to the left. For example, out_different[2] should indicate if in[2] is different from in[3]. For this part, treat the vector as wrapping around, so in[3]'s neighbour to the left is in[0].\nmodule top_module (\n\tinput [3:0] in,\n\toutput [2:0] out_both,\n\toutput [3:1] out_any,\n\toutput [3:0] out_different);\n"}
{"task_id": "circuit6", "instruction": "Implement the Verilog module based on the following description. Assume that signals are positive clock/clk edge triggered unless otherwise stated.\nThis is a combinational circuit. Read the simulation waveforms to determine what the circuit does, then implement it.\n\nIf a = 3, then q = 5a0e.\nIf a = 1, then q = aee0.\nIf a = 7, then q = 2f19.\nIf a = 2, then q = 27d4.\nIf a = 4, then q = 2066.\nIf a = 0, then q = 1232.\nIf a = 5, then q = 64ce.\nIf a = 6, then q = c526.\n\nmodule top_module (\n\tinput [2:0] a, \n\toutput reg [15:0] q);\n"}
{"task_id": "countslow", "instruction": "Implement the Verilog module based on the following description. Assume that signals are positive clock/clk edge triggered unless otherwise stated.\nBuild a decade counter that counts from 0 through 9, inclusive, with a period of 10. The reset input is active high synchronous, and should reset the counter to 0. We want to be able to pause the counter rather than always incrementing every clock cycle, so the \"slowena\" input if high indicates when the counter should increment. \nmodule top_module(\n\tinput clk,\n\tinput slowena,\n\tinput reset,\n\toutput reg [3:0] q);\n"}
{"task_id": "m2014_q4f", "instruction": "Implement the Verilog module based on the following description. Assume that signals are positive clock/clk edge triggered unless otherwise stated.\nImplement the following circuit in Verilog. Two inputs (in1 and in2) go to an AND gate, but the in2 input to the AND gate has a bubble. The output of the AND gate is connected to 'out'.\nmodule top_module (\n\tinput in1,\n\tinput in2,\n\toutput reg out);\n"}
{"task_id": "m2014_q4h", "instruction": "Implement the Verilog module based on the following description. Assume that signals are positive clock/clk edge triggered unless otherwise stated.\nThe module assigns the output port to the same value as the input port combinationally.\nmodule top_module(\n\tinput in,\n\toutput out);\n"}
{"task_id": "fsm1", "instruction": "Implement the Verilog module based on the following description. Assume that signals are positive clock/clk edge triggered unless otherwise stated.\nConsider the follow Moore machine with the diagram described below:\n\nThe state machine has the following states and their corresponding outputs: \n1. state A (out = 0).\n2. state B (out = 1).\n\nState transitions:\n1. From state A: If in = 0, then transition to state B. If in = 1, then transition to state A.\n2. From state B: If in = 0, then transition to state A. If in = 1, then transition to state B.\n\nWrite Verilog implementing this state machine. It should asynchronously reset into state B if reset if high.\nmodule top_module (\n        input clk,\n        input in,\n        input areset,\n        output reg out);"}
{"task_id": "dualedge", "instruction": "Implement the Verilog module based on the following description. Assume that signals are positive clock/clk edge triggered unless otherwise stated.\nA dual-edge triggered flip-flop is triggered on both edges of the clock. However, FPGAs don't have dual-edge triggered flip-flops, and always @(posedge clk or negedge clk) is not accepted as a legal sensitivity list. Build a circuit that functionally behaves like a dual-edge triggered flip-flop.\nmodule top_module(\n\tinput clk,\n\tinput d,\n\toutput reg q);\n"}
{"task_id": "xnorgate", "instruction": "Implement the Verilog module based on the following description. Assume that signals are positive clock/clk edge triggered unless otherwise stated.\nCreate a module that implements an XNOR gate.\nmodule top_module(\n\tinput a, \n\tinput b,\n\toutput out);\n"}
{"task_id": "mt2015_q4", "instruction": "Implement the Verilog module based on the following description. Assume that signals are positive clock/clk edge triggered unless otherwise stated.\nModule A implements the boolean function z = (x^y) & x.\n\n// Module B can be described by the following simulation waveform: \n\nIf x = 1, y = 0, then z = 0.\nIf x = 1, y = 1, then z = 1.\nIf x = 0, y = 1, then z = 0.\nIf x = 0, y = 0, then z = 1.\n\n\n// Now consider a top-level that uses two A submodules and two B submodules. The first input of all four submodules is connect to input 'x', and the second input of all four submodules is connected to 'y'. The output of the first A submodule is connected to a two-input OR, along with the output of the first B submodule. The second pair of A and B submodules is similarly connected to an AND gate. The output of the OR and the AND is connected to an XOR, whose output is 'z'.\n\n// Implement this circuit in Verilog.\n\nmodule top_module(\n\tinput x,\n\tinput y,\n\toutput reg z);\n"}
{"task_id": "rotate100", "instruction": "Implement the Verilog module based on the following description. Assume that signals are positive clock/clk edge triggered unless otherwise stated.\nBuild a 100-bit left/right rotator, with synchronous load and left/right enable. A rotator shifts-in the shifted-out bit from the other end of the register, unlike a shifter that discards the shifted-out bit and shifts in a zero. If enabled, a rotator rotates the bits around and does not modify/discard them. \n// (1) load: Loads shift register with data[99:0] instead of rotating. Synchronous active high.\n// (2) ena[1:0]: Synchronous. Chooses whether and which direction to rotate: \n//     (a) 2'b01 rotates right by one bit, \n//     (b) 2'b10 rotates left by one bit, \n//     (c) 2'b00 and 2'b11 do not rotate. \n// (3) q: The contents of the rotator.\nmodule top_module(\n\tinput clk,\n\tinput load,\n\tinput [1:0] ena,\n\tinput [99:0] data,\n\toutput reg [99:0] q);\n"}
{"task_id": "review2015_count1k", "instruction": "Implement the Verilog module based on the following description. Assume that signals are positive clock/clk edge triggered unless otherwise stated.\nBuild a counter that counts from 0 to 999, inclusive, with a period of 1000 cycles. The reset input is active high synchronous, and should reset the counter to 0.\nmodule top_module(\n\tinput clk,\n\tinput reset,\n\toutput reg [9:0] q);\n"}
{"task_id": "notgate", "instruction": "Implement the Verilog module based on the following description. Assume that signals are positive clock/clk edge triggered unless otherwise stated.\nCreate a module that implements a NOT gate.\nmodule top_module(\n\tinput in,\n\toutput out);\n"}
{"task_id": "fsm_onehot", "instruction": "Implement the Verilog module based on the following description. Assume that signals are positive clock/clk edge triggered unless otherwise stated.\nGiven the follow state machine with 1 input and 2 outputs (the outputs are given as \"(out1, out2)\"):\n\nThe state machine has the following states and their corresponding outputs: \n1. state S0 (out1 = 0, out2 = 0).\n2. state S1 (out1 = 0, out2 = 0).\n3. state S2 (out1 = 0, out2 = 0).\n4. state S3 (out1 = 0, out2 = 0).\n5. state S4 (out1 = 0, out2 = 0).\n6. state S5 (out1 = 0, out2 = 0).\n7. state S6 (out1 = 0, out2 = 0).\n8. state S7 (out1 = 0, out2 = 1).\n9. state S8 (out1 = 1, out2 = 0).\n10. state S9 (out1 = 1, out2 = 1).\n\nState transitions:\n1. From state S0: If in = 0, then transition to state S0. If in = 1, then transition to state S1.\n2. From state S1: If in = 0, then transition to state S0. If in = 1, then transition to state S2.\n3. From state S2: If in = 0, then transition to state S0. If in = 1, then transition to state S3.\n4. From state S3: If in = 0, then transition to state S0. If in = 1, then transition to state S4.\n5. From state S4: If in = 0, then transition to state S0. If in = 1, then transition to state S5.\n6. From state S5: If in = 0, then transition to state S8. If in = 1, then transition to state S6.\n7. From state S6: If in = 0, then transition to state S9. If in = 1, then transition to state S7.\n8. From state S7: If in = 0, then transition to state S0. If in = 1, then transition to state S7.\n9. From state S8: If in = 0, then transition to state S0. If in = 1, then transition to state S1.\n10. From state S9: If in = 0, then transition to state S0. If in = 1, then transition to state S1.\n\nSuppose this state machine uses one-hot encoding, where state[0] through state[9] correspond to the states S0 though S9, respectively. The outputs are zero unless otherwise specified.\n\nWrite Verilog implementing the state transition logic and output logic portions of the state machine (but not the state flip-flops). You are given the current state in state[9:0] and must produce next_state[9:0] and the two outputs. Derive the logic equations by inspection assuming a one-hot encoding.\nmodule top_module (\n        input in,\n        input [9:0] state,\n        output reg [9:0] next_state,\n        output reg out1,\n        output reg out2);"}
{"task_id": "ece241_2013_q7", "instruction": "Implement the Verilog module based on the following description. Assume that signals are positive clock/clk edge triggered unless otherwise stated.\nA JK flip-flop has the below truth table. Note: Qold is the output of the flip-flop before the positive clock edge.\n\nVariables:\n1. j (input)\n2. k (input)\n3. Q (output)\n\nRules:\n1. If j=0 and k=0, then Q=Qold.\n2. If j=0 and k=1, then Q=0.\n3. If j=1 and k=0, then Q=1.\n4. If j=1 and k=1, then Q=~Qold.\n\nmodule top_module (\n        input clk,\n        input j,\n        input k,\n        output reg Q);"}
{"task_id": "popcount3", "instruction": "Implement the Verilog module based on the following description. Assume that signals are positive clock/clk edge triggered unless otherwise stated.\nA \"population count\" circuit counts the number of '1's in an input vector. Build a population count circuit for a 3-bit input vector.\nmodule top_module (\n\tinput [2:0] in,\n\toutput [1:0] out);\n"}
{"task_id": "vector5", "instruction": "Implement the Verilog module based on the following description. Assume that signals are positive clock/clk edge triggered unless otherwise stated.\nGiven five 1-bit signals (a, b, c, d, and e), compute all 25 pairwise one-bit comparisons in the 25-bit output vector. The output should be 1 if the two bits being compared are equal. Example: out[24] = ~a ^ a; out[23] = ~a ^ b; out[22] = ~a ^ c; ... out[ 1] = ~e ^ d; out[ 0] = ~e ^ e.\nmodule top_module (\n\tinput a,\n\tinput b,\n\tinput c,\n\tinput d,\n\tinput e,\n\toutput [24:0] out);\n"}
{"task_id": "lemmings1", "instruction": "Implement the Verilog module based on the following description. Assume that signals are positive clock/clk edge triggered unless otherwise stated.\nThe game Lemmings involves critters with fairly simple brains. So simple that we are going to model it using a finite state machine. In the Lemmings' 2D world, Lemmings can be in one of two states: walking left (walk_left is 1) or walking right (walk_right is 1). It will switch directions if it hits an obstacle. In particular, if a Lemming is bumped on the left (by receiving a 1 on bump_left), it will walk right. If it's bumped on the right (by receiving a 1 on bump_right), it will walk left. If it's bumped on both sides at the same time, it will still switch directions. Implement a Moore state machine with two states, two inputs, and one output (internal to the module) that models this behaviour. areset is positive edge triggered asynchronous reseting the Lemming machine to walk left.\nmodule top_module (\n\tinput clk,\n\tinput areset,\n\tinput bump_left,\n\tinput bump_right,\n\toutput walk_left,\n\toutput walk_right);\n"}
{"task_id": "circuit1", "instruction": "Implement the Verilog module based on the following description. Assume that signals are positive clock/clk edge triggered unless otherwise stated.\nThis is a combinational circuit. Read the simulation waveforms to determine what the circuit does, then implement it.\n\nIf a = 1, b = 1, then q = 1.\nIf a = 0, b = 1, then q = 0.\nIf a = 0, b = 0, then q = 0.\nIf a = 1, b = 0, then q = 0.\n\n\nmodule top_module (\n\tinput a, \n\tinput b, \n\toutput reg q);\n"}
{"task_id": "7458", "instruction": "Implement the Verilog module based on the following description. Assume that signals are positive clock/clk edge triggered unless otherwise stated.\nThe 7458 is a chip with four AND gates and two OR gates. Create a module in Verilog with the same functionality as the 7458 chip. It has 10 inputs and 2 outputs. You may choose to use an `assign` statement to drive each of the output wires, or you may choose to declare (four) wires for use as intermediate signals, where each internal wire is driven by the output of one of the AND gates.\n\n// In this circuit, p1y should be the OR of two 3-input AND gates: one that ANDs p1a, p1b, and p1c, and the second that ANDs p1d, p1e, and p1f. The output p2y is the OR of two 2-input AND gates: one that ANDs p2a and p2b, and the second that ANDs p2c and p2d.\nmodule top_module(\n\tinput p1a, \n\tinput p1b, \n\tinput p1c, \n\tinput p1d,\n\tinput p1e,\n\tinput p1f,\n\toutput p1y, \n\tinput p2a, \n\tinput p2b, \n\tinput p2c, \n\tinput p2d, \n\toutput p2y);\n"}
{"task_id": "2014_q3c", "instruction": "Implement the Verilog module based on the following description. Assume that signals are positive clock/clk edge triggered unless otherwise stated.\nGiven the state-assigned table shown below, implement the logic functions Y[0] and z.\n\nThe state machine has the following states and their corresponding outputs: \n1. state y[2:0] = 000 (z = 0).\n2. state y[2:0] = 001 (z = 0).\n3. state y[2:0] = 010 (z = 0).\n4. state y[2:0] = 011 (z = 1).\n5. state y[2:0] = 100 (z = 1).\n\nState transitions:\n1. From state y[2:0] = 000: If x = 0, then transition to state y[2:0] = 000. If x = 1, then transition to state y[2:0] = 001.\n2. From state y[2:0] = 001: If x = 0, then transition to state y[2:0] = 001. If x = 1, then transition to state y[2:0] = 100.\n3. From state y[2:0] = 010: If x = 0, then transition to state y[2:0] = 010. If x = 1, then transition to state y[2:0] = 001.\n4. From state y[2:0] = 011: If x = 0, then transition to state y[2:0] = 001. If x = 1, then transition to state y[2:0] = 010.\n5. From state y[2:0] = 100: If x = 0, then transition to state y[2:0] = 011. If x = 1, then transition to state y[2:0] = 100.\n\nmodule top_module (\n  input clk,\n  input x,\n  input [2:0] y,\n  output reg Y0,\n  output reg z);"}
{"task_id": "m2014_q4e", "instruction": "Implement the Verilog module based on the following description. Assume that signals are positive clock/clk edge triggered unless otherwise stated.\nImplement a 2-input NOR gate.\nmodule top_module (\n\tinput in1,\n\tinput in2,\n\toutput reg out);\n"}
{"task_id": "wire4", "instruction": "Implement the Verilog module based on the following description. Assume that signals are positive clock/clk edge triggered unless otherwise stated.\nCreate a module with 3 inputs and 4 outputs that behaves like wires that makes these connections: a -> w\n// ; b -> x; b -> y; c -> z.\nmodule top_module (\n\tinput a,\n\tinput b,\n\tinput c,\n\toutput w,\n\toutput x,\n\toutput y,\n\toutput z  );\n"}
{"task_id": "m2014_q4b", "instruction": "Implement the Verilog module based on the following description. Assume that signals are positive clock/clk edge triggered unless otherwise stated.\nImplement a D flip flop, positive edge triggered, with an asynchronous reset \"ar\".\nmodule top_module (\n\tinput clk,\n\tinput d,\n\tinput ar,\n\toutput reg q);\n"}
{"task_id": "always_case", "instruction": "Implement the Verilog module based on the following description. Assume that signals are positive clock/clk edge triggered unless otherwise stated.\nCreate a 6-to-1 multiplexer. When sel is between 0 and 5, choose the corresponding data input. Otherwise, output 0. The data inputs and outputs are all 4 bits wide.\nmodule top_module (\n\tinput [2:0] sel,\n\tinput [3:0] data0,\n\tinput [3:0] data1,\n\tinput [3:0] data2,\n\tinput [3:0] data3,\n\tinput [3:0] data4,\n\tinput [3:0] data5,\n\toutput reg [3:0] out);\n"}
{"task_id": "timer", "instruction": "Implement the Verilog module based on the following description. Assume that signals are positive clock/clk edge triggered unless otherwise stated.\nImplement a timer that counts down for a given number of clock cycles, then asserts a signal to indicate that the given duration has elapsed. A good way to implement this is with a down-counter that asserts an output signal when the count becomes 0. At each clock cycle: \n// (1) If load = 1, load the internal counter with the 10-bit data, the number of clock cycles the timer should count before timing out. The counter can be loaded at any time, including when it is still counting and has not yet reached 0. \n// (2) If load = 0, the internal counter should decrement by 1. The output signal tc (\"terminal count\") indicates whether the internal counter has reached 0. Once the internal counter has reached 0, it should stay 0 (stop counting) until the counter is loaded again.\n\n\nmodule top_module(\n\tinput clk, \n\tinput load, \n\tinput [9:0] data, \n\toutput tc);\n"}
{"task_id": "review2015_fsmseq", "instruction": "Implement the Verilog module based on the following description. Assume that signals are positive clock/clk edge triggered unless otherwise stated.\nBuild a finite-state machine that searches for the sequence 1101 in an input bit stream. When the sequence is found, it should set start_shifting to 1, forever, until reset. Reset is active high synchronous.\nmodule top_module(\n\tinput clk,\n\tinput reset,\n\tinput data,\n\toutput start_shifting);\n"}
{"task_id": "dff8r", "instruction": "Implement the Verilog module based on the following description. Assume that signals are positive clock/clk edge triggered unless otherwise stated.\nCreate 8 D flip-flops with active high synchronous reset setting the output to zero. All DFFs should be triggered by the positive edge of clk.\nmodule top_module(\n\tinput clk,\n\tinput [7:0] d,\n\tinput reset,\n\toutput reg [7:0] q);\n"}
{"task_id": "edgedetect2", "instruction": "Implement the Verilog module based on the following description. Assume that signals are positive clock/clk edge triggered unless otherwise stated.\nFor each bit in an 8-bit vector, detect when the input signal changes from one clock cycle to the next (detect any edge). The output bit should be set the cycle after a 0 to 1 transition occurs.\nmodule top_module(\n\tinput clk,\n\tinput [7:0] in,\n\toutput reg [7:0] anyedge);\n"}
{"task_id": "count1to10", "instruction": "Implement the Verilog module based on the following description. Assume that signals are positive clock/clk edge triggered unless otherwise stated.\nMake a decade counter that counts 1 through 10, inclusive. The reset input is active high synchronous, and should reset the counter to 1.\nmodule top_module(\n\tinput clk,\n\tinput reset,\n\toutput reg [3:0] q);\n"}
{"task_id": "circuit9", "instruction": "Implement the Verilog module based on the following description. Assume that signals are positive clock/clk edge triggered unless otherwise stated.\nThis is a sequential circuit. Read the simulation waveforms to determine what the circuit does, then implement it.\n\nTime 0ns: clk = 0, a = 1, q = x.\nTime 5ns: clk = 1, a = 1, q = 4.\nTime 10ns: clk = 0, a = 1, q = 4.\nTime 15ns: clk = 1, a = 1, q = 4.\nTime 20ns: clk = 0, a = 1, q = 4.\nTime 25ns: clk = 1, a = 1, q = 4.\nTime 30ns: clk = 0, a = 1, q = 4.\nTime 35ns: clk = 1, a = 1, q = 4.\nTime 40ns: clk = 0, a = 1, q = 4.\nTime 45ns: clk = 1, a = 0, q = 4.\nTime 50ns: clk = 0, a = 0, q = 4.\nTime 55ns: clk = 1, a = 0, q = 5.\nTime 60ns: clk = 0, a = 0, q = 5.\nTime 65ns: clk = 1, a = 0, q = 6.\nTime 70ns: clk = 0, a = 0, q = 6.\nTime 75ns: clk = 1, a = 0, q = 0.\nTime 80ns: clk = 0, a = 0, q = 0.\nTime 85ns: clk = 1, a = 0, q = 1.\nTime 90ns: clk = 0, a = 0, q = 1.\n\nmodule top_module (\n\tinput clk,\n\tinput a, \n\toutput reg [2:0] q);\n"}
{"task_id": "lfsr5", "instruction": "Implement the Verilog module based on the following description. Assume that signals are positive clock/clk edge triggered unless otherwise stated.\nA linear feedback shift register is a shift register usually with a few XOR gates to produce the next state of the shift register. A Galois LFSR is one particular arrangement where bit positions with a \"tap\" are XORed with the output bit to produce its next value, while bit positions without a tap shift. If the taps positions are carefully chosen, the LFSR can be made to be \"maximum-length\". A maximum-length LFSR of n bits cycles through 2**n-1 states before repeating (the all-zero state is never reached). Build a 5-bit maximal-length Galois LFSR with taps at bit positions 5 and 3. The active-high synchronous reset should reset the LFSR output to 1.\nmodule top_module(\n\tinput clk,\n\tinput reset,\n\toutput reg [4:0] q);\n"}
{"task_id": "bugs_addsubz", "instruction": "Implement the Verilog module based on the following description. Assume that signals are positive clock/clk edge triggered unless otherwise stated.\nThe following adder-subtractor with zero flag doesn't work. Fix the bug(s).\n\n// synthesis verilog_input_version verilog_2001\n// module top_module ( \n//     input do_sub,\n//     input [7:0] a,\n//     input [7:0] b,\n//     output reg [7:0] out,\n//     output reg result_is_zero\n// );//\n\n//     always @(*) begin\n//         case (do_sub)\n//           0: out = a+b;\n//           1: out = a-b;\n//         endcase\n\n//         if (~out)\n//             result_is_zero = 1;\n//     end\n\n// endmodule\nmodule top_module (\n\tinput do_sub,\n\tinput [7:0] a,\n\tinput [7:0] b,\n\toutput reg [7:0] out,\n\toutput reg result_is_zero\n);\n"}
{"task_id": "m2014_q3", "instruction": "Implement the Verilog module based on the following description. Assume that signals are positive clock/clk edge triggered unless otherwise stated.\nConsider the function f shown in the Karnaugh map below. d is don't-care, which means you may choose to output whatever value is convenient. Implement this function. \nIf x[4]x[3]x[2]x[1] is 0000, then out is d.\nIf x[4]x[3]x[2]x[1] is 0010, then out is 0.\nIf x[4]x[3]x[2]x[1] is 0011, then out is d.\nIf x[4]x[3]x[2]x[1] is 0001, then out is d.\nIf x[4]x[3]x[2]x[1] is 1000, then out is 0.\nIf x[4]x[3]x[2]x[1] is 1010, then out is d.\nIf x[4]x[3]x[2]x[1] is 1011, then out is 1.\nIf x[4]x[3]x[2]x[1] is 1001, then out is 0.\nIf x[4]x[3]x[2]x[1] is 1100, then out is 1.\nIf x[4]x[3]x[2]x[1] is 1110, then out is 1.\nIf x[4]x[3]x[2]x[1] is 1111, then out is d.\nIf x[4]x[3]x[2]x[1] is 1101, then out is d.\nIf x[4]x[3]x[2]x[1] is 0100, then out is 1.\nIf x[4]x[3]x[2]x[1] is 0110, then out is 1.\nIf x[4]x[3]x[2]x[1] is 0111, then out is 0.\nIf x[4]x[3]x[2]x[1] is 0101, then out is d.\n\nmodule top_module (\n\tinput [4:1] x,\n\toutput reg f);\n"}
{"task_id": "bugs_case", "instruction": "Implement the Verilog module based on the following description. Assume that signals are positive clock/clk edge triggered unless otherwise stated.\nThis combinational circuit is supposed to recognize 8-bit keyboard scancodes for keys 0 through 9. It should indicate whether one of the 10 cases were recognized (valid), and if so, which key was detected. If the 8-bit input is 8'h45, 8'h16, 8'h1e, 8'h26, 8'h25, 8'h2e, 8'h36, 8'h3d, 8'h3e, or 8'h46, the 4-bit output will be set to 0, 1, 2, 3, 4, 5, 6, 7, 8, or 9 respectively, the 1-bit valid would be set to 1. If the input does not match any of the cases, both output signals would be set to 0.\nmodule top_module (\n\tinput [7:0] code,\n\toutput reg [3:0] out,\n\toutput reg valid);\n"}
{"task_id": "vectorr", "instruction": "Implement the Verilog module based on the following description. Assume that signals are positive clock/clk edge triggered unless otherwise stated.\nGiven an 8-bit input vector [7:0], reverse its bit ordering.\nmodule top_module (\n\tinput [7:0] in,\n\toutput [7:0] out);\n"}
{"task_id": "kmap3", "instruction": "Implement the Verilog module based on the following description. Assume that signals are positive clock/clk edge triggered unless otherwise stated.\nImplement the circuit described by the Karnaugh map below. d is don't-care, which means you may choose to output whatever value is convenient.\n\nIf abcd is 0100, then out is d.\nIf abcd is 0000, then out is 0.\nIf abcd is 1000, then out is 1.\nIf abcd is 1100, then out is 1.\nIf abcd is 0101, then out is 0.\nIf abcd is 0001, then out is 0.\nIf abcd is 1001, then out is d.\nIf abcd is 1101, then out is d.\nIf abcd is 0111, then out is 0.\nIf abcd is 0011, then out is 1.\nIf abcd is 1011, then out is 1.\nIf abcd is 1111, then out is 1.\nIf abcd is 0110, then out is 0.\nIf abcd is 0010, then out is 1.\nIf abcd is 1010, then out is 1.\nIf abcd is 1110, then out is 1.\n\nmodule top_module (\n\tinput a, \n\tinput b,\n\tinput c,\n\tinput d,\n\toutput reg out);\n"}
{"task_id": "review2015_shiftcount", "instruction": "Implement the Verilog module based on the following description. Assume that signals are positive clock/clk edge triggered unless otherwise stated.\nBuild a four-bit shift register that also acts as a down counter. Data is shifted in most-significant-bit first when shift_ena is 1. The number currently in the shift register is decremented when count_ena is 1. Since the full system doesn't ever use shift_ena and count_ena together, it does not matter what your circuit does if both control inputs are 1 (This mainly means that it doesn't matter which case gets higher priority).\nmodule top_module(\n\tinput clk,\n\tinput shift_ena,\n\tinput count_ena,\n\tinput data,\n\toutput reg [3:0] q);\n"}
{"task_id": "wire", "instruction": "Implement the Verilog module based on the following description. Assume that signals are positive clock/clk edge triggered unless otherwise stated.\nCreate a module with one input and one output that behaves like a wire.\nmodule top_module(\n\tinput in,\n\toutput out);\n"}
{"task_id": "review2015_fsmshift", "instruction": "Implement the Verilog module based on the following description. Assume that signals are positive clock/clk edge triggered unless otherwise stated.\nThis module is a part of the FSM for controlling the shift register, we want the ability to enable the shift register for exactly 4 clock cycles whenever the proper bit pattern is detected. Whenever the FSM is reset, assert shift_ena for 4 cycles, then 0 forever (until reset). Reset should be active high synchronous.\nmodule top_module(\n\tinput clk,\n\tinput reset,\n\toutput shift_ena);\n"}
{"task_id": "count15", "instruction": "Implement the Verilog module based on the following description. Assume that signals are positive clock/clk edge triggered unless otherwise stated.\nBuild a 4-bit binary counter that counts from 0 through 15, inclusive, with a period of 16. The reset input is active high synchronous, and should reset the counter to 0.\nmodule top_module(\n\tinput clk,\n\tinput reset,\n\toutput reg [3:0] q);\n"}
{"task_id": "always_if", "instruction": "Implement the Verilog module based on the following description. Assume that signals are positive clock/clk edge triggered unless otherwise stated.\nBuild a 2-to-1 mux that chooses between a and b. Choose b if both sel_b1 and sel_b2 are true. Otherwise, choose a. Do the same twice, once using assign statements and once using a procedural if statement.\nmodule top_module (\n\tinput a,\n\tinput b,\n\tinput sel_b1,\n\tinput sel_b2,\n\toutput out_assign,\n\toutput reg out_always);\n"}
{"task_id": "kmap1", "instruction": "Implement the Verilog module based on the following description. Assume that signals are positive clock/clk edge triggered unless otherwise stated.\nImplement the circuit described by the Karnaugh map below.\nIf abc is 000, then out is 0.\nIf abc is 100, then out is 1.\nIf abc is 001, then out is 1.\nIf abc is 101, then out is 1.\nIf abc is 011, then out is 1.\nIf abc is 111, then out is 1.\nIf abc is 010, then out is 1.\nIf abc is 110, then out is 1.\n\nmodule top_module(\n\tinput a, \n\tinput b,\n\tinput c,\n\toutput reg out);\n"}
{"task_id": "2013_q2afsm", "instruction": "Implement the Verilog module based on the following description. Assume that signals are positive clock/clk edge triggered unless otherwise stated.\nConsider the FSM described by the state diagram shown below:\n\nThe state machine has the following states and their corresponding outputs: \n1. state A (no output).\n2. state B (g[1] = 1).\n3. state C (g[2] = 1).\n4. state D (g[3] = 1).\n\nState transitions:\n1. From state A: If r[1] = 0 and r[2] = 0 and r[3] = 0, then transition to state A. If r[1] = 1, then transition to state B. If r[1] = 0 and r[2] = 1, then transition to state C. If r[1] = 0 and r[2] = 0 and r[3] = 1, then transition to state D.\n2. From state B: If r[1] = 1, then transition to state B. If r[1] = 0, then transition to state A.\n3. From state C: If r[2] = 1, then transition to state C. If r[2] = 0, then transition to state A.\n4. From state D: If r[3] = 1, then transition to state D. If r[3] = 0, then transition to state A.\n\nResetn is an active-low synchronous reset that resets into state A. This FSM acts as an arbiter circuit, which controls access to some type of resource by three requesting devices. Each device makes its request for the resource by setting a signal _r[i]_ = 1, where _r[i]_ is either _r[1]_, _r[2]_, or _r[3]_. Each r[i] is an input signal to the FSM, and represents one of the three devices. The FSM stays in state _A_ as long as there are no requests. When one or more request occurs, then the FSM decides which device receives a grant to use the resource and changes to a state that sets that device's _g[i]_ signal to 1. Each _g[i]_ is an output from the FSM. There is a priority system, in that device 1 has a higher priority than device 2, and device 3 has the lowest priority. Hence, for example, device 3 will only receive a grant if it is the only device making a request when the FSM is in state _A_. Once a device, _i_, is given a grant by the FSM, that device continues to receive the grant as long as its request, _r[i]_ = 1.\n\nWrite complete Verilog code that represents this FSM. Use separate always blocks for the state table and the state flip-flops, as done in lectures. Describe the FSM outputs, _g[i]_, using either continuous assignment statement(s) or an always block (at your discretion). Assign any state codes that you wish to use.\nmodule top_module (\n        input clk,\n        input resetn,\n        input [3:1] r,\n        output reg [3:1] g);"}
{"task_id": "count10", "instruction": "Implement the Verilog module based on the following description. Assume that signals are positive clock/clk edge triggered unless otherwise stated.\nBuild a decade counter that counts from 0 through 9, inclusive, with a period of 10. The reset input is active high synchronous, and should reset the counter to 0.\nmodule top_module(\n\tinput clk,\n\tinput reset,\n\toutput reg [3:0] q);\n"}
{"task_id": "fsm_ps2", "instruction": "Implement the Verilog module based on the following description. Assume that signals are positive clock/clk edge triggered unless otherwise stated.\nThe PS/2 mouse protocol sends messages that are three bytes long. However, within a continuous byte stream, it's not obvious where messages start and end. The only indication is that the first byte of each three byte message always has in[3]=1 (but in[3] of the other two bytes may be 1 or 0 depending on data). We want a finite state machine that will search for message boundaries when given an input byte stream. The algorithm we'll use is to discard bytes until we see one with in[3]=1. We then assume that this is byte 1 of a message, and signal the receipt of a message once all 3 bytes have been received (done). The FSM should signal done in the cycle immediately after the third byte of each message was successfully received. Reset should be active high synchronous.\nmodule top_module (\n\tinput clk,\n\tinput [7:0] in,\n\tinput reset,\n\toutput done);\n"}
{"task_id": "mux2to1", "instruction": "Implement the Verilog module based on the following description. Assume that signals are positive clock/clk edge triggered unless otherwise stated.\nCreate a one-bit wide, 2-to-1 multiplexer. When sel=0, choose a. When sel=1, choose b.\nmodule top_module (\n\tinput a,\n\tinput b,\n\tinput sel,\n\toutput out);\n"}
{"task_id": "gates4", "instruction": "Implement the Verilog module based on the following description. Assume that signals are positive clock/clk edge triggered unless otherwise stated.\nBuild a combinational circuit with four inputs, in[3:0]. There are 3 outputs: \n// (1) out_and: output of a 4-input AND gate. \n// (2) out_or: output of a 4-input OR gate. \n// (3) out_xor: output of a 4-input XOR gate.\n\nmodule top_module (\n\tinput [3:0] in,\n\toutput out_and,\n\toutput out_or,\n\toutput out_xor);\n"}
{"task_id": "2014_q3bfsm", "instruction": "Implement the Verilog module based on the following description. Assume that signals are positive clock/clk edge triggered unless otherwise stated.\nGiven the state-assigned table shown below, implement the finite-state machine. Reset should synchronous active high reset the FSM to state 000.\n\nThe state machine has the following states and their corresponding outputs: \n1. state y[2:0] = 000 (z = 0).\n2. state y[2:0] = 001 (z = 0).\n3. state y[2:0] = 010 (z = 0).\n4. state y[2:0] = 011 (z = 1).\n5. state y[2:0] = 100 (z = 1).\n\nState transitions:\n1. From state y[2:0] = 000: If x = 0, then transition to state y[2:0] = 000. If x = 1, then transition to state y[2:0] = 001.\n2. From state y[2:0] = 001: If x = 0, then transition to state y[2:0] = 001. If x = 1, then transition to state y[2:0] = 100.\n3. From state y[2:0] = 010: If x = 0, then transition to state y[2:0] = 010. If x = 1, then transition to state y[2:0] = 001.\n4. From state y[2:0] = 011: If x = 0, then transition to state y[2:0] = 001. If x = 1, then transition to state y[2:0] = 010.\n5. From state y[2:0] = 100: If x = 0, then transition to state y[2:0] = 011. If x = 1, then transition to state y[2:0] = 100.\n\nmodule top_module (\n  input clk,\n  input reset,\n  input x,\n  output reg z);"}
{"task_id": "2013_q2bfsm", "instruction": "Implement the Verilog module based on the following description. Assume that signals are positive clock/clk edge triggered unless otherwise stated.\nConsider a finite state machine that is used to control some type of motor. The FSM has inputs x and y, which come from the motor, and produces outputs f and g, which control the motor. There is also a clock input called clk and a reset input (synchronous, active low) called resetn. The FSM has to work as follows. As long as the reset input is asserted, the FSM stays in a beginning state, called state A. When the reset signal is de-asserted, then after the next clock edge the FSM has to set the output f to 1 for one clock cycle. Then, the FSM has to monitor the x input. When x has produced the values 1, 0, 1 in three successive clock cycles, then g should be set to 1 on the following clock cycle. While maintaining g = 1 the FSM has to monitor the y input. If y has the value 1 within at most two clock cycles, then the FSM should maintain g = 1 permanently (that is, until reset). But if y does not become 1 within two clock cycles, then the FSM should set g = 0 permanently (until reset).\nmodule top_module (\n\tinput clk,\n\tinput resetn,\n\tinput x,\n\tinput y,\n\toutput f,\n\toutput g);\n"}
{"task_id": "dff8p", "instruction": "Implement the Verilog module based on the following description. Assume that signals are positive clock/clk edge triggered unless otherwise stated.\nCreate 8 D flip-flops with active high synchronous reset. The flip-flops must be reset to 0x34 rather than zero. All DFFs should be triggered by the negative edge of clk.\nmodule top_module(\n\tinput clk,\n\tinput [7:0] d,\n\tinput reset,\n\toutput reg [7:0] q);\n"}
{"task_id": "reduction", "instruction": "Implement the Verilog module based on the following description. Assume that signals are positive clock/clk edge triggered unless otherwise stated.\nParity checking is often used as a simple method of detecting errors when transmitting data through an imperfect channel. Create a circuit that will compute a parity bit for a 8-bit byte (which will add a 9th bit to the byte). We will use \"even\" parity, where the parity bit is just the XOR of all 8 data bits.\nmodule top_module (\n\tinput [7:0] in,\n\toutput parity);\n"}
{"task_id": "fsm3comb", "instruction": "Implement the Verilog module based on the following description. Assume that signals are positive clock/clk edge triggered unless otherwise stated.\nThe following is the state transition table for a Moore state machine with one input, one output, and four states. Use the following state encoding: A=2'b00, B=2'b01, C=2'b10, D=2'b11.Implement only the state transition logic and output logic (the combinational logic portion) for this state machine. Given the current state (state), compute the next_state and output (out) based on the state transition table.    \n\nThe state machine has the following states and their corresponding outputs: \n1. state A (out = 0).\n2. state B (out = 0).\n3. state C (out = 0).\n4. state D (out = 1).\n\nState transitions:\n1. From state A: If in = 0, then transition to state A. If in = 1, then transition to state B.\n2. From state B: If in = 0, then transition to state C. If in = 1, then transition to state B.\n3. From state C: If in = 0, then transition to state A. If in = 1, then transition to state D.\n4. From state D: If in = 0, then transition to state C. If in = 1, then transition to state B.\n\nmodule top_module (\n  input in,\n  input [1:0] state,\n  output reg [1:0] next_state,\n  output reg out);"}
{"task_id": "mt2015_q4b", "instruction": "Implement the Verilog module based on the following description. Assume that signals are positive clock/clk edge triggered unless otherwise stated.\nThe module can be described by the following simulation waveform: \n\nIf x = 1, y = 0, then z = 0.\nIf x = 1, y = 1, then z = 1.\nIf x = 0, y = 1, then z = 0.\nIf x = 0, y = 0, then z = 1.\n\nmodule top_module(\n\tinput x,\n\tinput y,\n\toutput reg z);\n"}
{"task_id": "2012_q2fsm", "instruction": "Implement the Verilog module based on the following description. Assume that signals are positive clock/clk edge triggered unless otherwise stated.\nConsider the state machine shown below:\n\nThe state machine has the following states and their corresponding outputs: \n1. state A (z = 0).\n2. state B (z = 0).\n3. state C (z = 0).\n4. state D (z = 0).\n5. state E (z = 1).\n6. state F (z = 1).\n\nState transitions:\n1. From state A: If w = 1, then transition to state B. If w = 0, then transition to state A.\n2. From state B: If w = 1, then transition to state C. If w = 0, then transition to state D.\n3. From state C: If w = 1, then transition to state E. If w = 0, then transition to state D.\n4. From state D: If w = 1, then transition to state F. If w = 0, then transition to state A.\n5. From state E: If w = 1, then transition to state E. If w = 0, then transition to state D.\n6. From state F: If w = 1, then transition to state C. If w = 0, then transition to state D.\n\nReset resets into state A and is synchronous active-high.\n\nWrite complete Verilog code that represents this FSM. Use separate **always** blocks for the state table and the state flip-flops. Describe the FSM output, which is called _z_, using either continuous assignment statement(s) or an **always** block (at your discretion). Assign any state codes that you wish to use.\nmodule top_module (\n        input clk,\n        input reset,\n        input w,\n        output reg z);"}
{"task_id": "dff16e", "instruction": "Implement the Verilog module based on the following description. Assume that signals are positive clock/clk edge triggered unless otherwise stated.\nCreate 16 D flip-flops. It's sometimes useful to only modify parts of a group of flip-flops. The byte-enable inputs control whether each byte of the 16 registers should be written to on that cycle. byteena[1] controls the upper byte d[15:8], while byteena[0] controls the lower byte d[7:0]. resetn is a synchronous, active-low reset. All DFFs should be triggered by the positive edge of clk.\nmodule top_module(\n\tinput clk,\n\tinput resetn,\n\tinput [1:0] byteena,\n\tinput [15:0] d,\n\toutput reg [15:0] q);\n"}
{"task_id": "edgedetect", "instruction": "Implement the Verilog module based on the following description. Assume that signals are positive clock/clk edge triggered unless otherwise stated.\nFor each bit in an 8-bit vector, detect when the input signal changes from 0 in one clock cycle to 1 the next (similar to positive edge detection). The output bit should be set the cycle after a 0 to 1 transition occurs.\nmodule top_module(\n\tinput clk,\n\tinput [7:0] in,\n\toutput reg [7:0] pedge);\n"}
{"task_id": "circuit8", "instruction": "Implement the Verilog module based on the following description. Assume that signals are positive clock/clk edge triggered unless otherwise stated.\nThis is a sequential circuit. Read the simulation waveforms to determine what the circuit does, then implement it.\n\nTime 0ns: clock = 0, a = 0, p = x, q = x.\nTime 5ns: clock = 0, a = 0, p = x, q = x.\nTime 10ns: clock = 0, a = 0, p = x, q = x.\nTime 15ns: clock = 0, a = 0, p = x, q = x.\nTime 20ns: clock = 0, a = 0, p = x, q = x.\nTime 25ns: clock = 1, a = 0, p = 0, q = x.\nTime 30ns: clock = 1, a = 0, p = 0, q = x.\nTime 35ns: clock = 1, a = 0, p = 0, q = x.\nTime 40ns: clock = 1, a = 0, p = 0, q = x.\nTime 45ns: clock = 1, a = 0, p = 0, q = x.\nTime 50ns: clock = 1, a = 0, p = 0, q = x.\nTime 55ns: clock = 0, a = 0, p = 0, q = 0.\nTime 60ns: clock = 0, a = 0, p = 0, q = 0.\nTime 65ns: clock = 0, a = 0, p = 0, q = 0.\nTime 70ns: clock = 0, a = 1, p = 0, q = 0.\nTime 75ns: clock = 0, a = 0, p = 0, q = 0.\nTime 80ns: clock = 0, a = 1, p = 0, q = 0.\nTime 85ns: clock = 1, a = 0, p = 0, q = 0.\nTime 90ns: clock = 1, a = 1, p = 1, q = 0.\nTime 95ns: clock = 1, a = 0, p = 0, q = 0.\nTime 100ns: clock = 1, a = 1, p = 1, q = 0.\nTime 105ns: clock = 1, a = 0, p = 0, q = 0.\nTime 110ns: clock = 1, a = 1, p = 1, q = 0.\nTime 115ns: clock = 0, a = 0, p = 1, q = 1.\nTime 120ns: clock = 0, a = 1, p = 1, q = 1.\nTime 125ns: clock = 0, a = 0, p = 1, q = 1.\nTime 130ns: clock = 0, a = 1, p = 1, q = 1.\nTime 135ns: clock = 0, a = 0, p = 1, q = 1.\nTime 140ns: clock = 0, a = 0, p = 1, q = 1.\nTime 145ns: clock = 1, a = 0, p = 0, q = 1.\nTime 150ns: clock = 1, a = 0, p = 0, q = 1.\nTime 155ns: clock = 1, a = 0, p = 0, q = 1.\nTime 160ns: clock = 1, a = 0, p = 0, q = 1.\nTime 165ns: clock = 1, a = 1, p = 1, q = 1.\nTime 170ns: clock = 1, a = 0, p = 0, q = 1.\nTime 175ns: clock = 0, a = 1, p = 0, q = 0.\nTime 180ns: clock = 0, a = 0, p = 0, q = 0.\nTime 185ns: clock = 0, a = 1, p = 0, q = 0.\nTime 190ns: clock = 0, a = 0, p = 0, q = 0.\n\nmodule top_module (\n\tinput clock,\n\tinput a, \n\toutput reg p,\n\toutput reg q);\n"}
{"task_id": "rule90", "instruction": "Implement the Verilog module based on the following description. Assume that signals are positive clock/clk edge triggered unless otherwise stated.\nRule 90 is a one-dimensional cellular automaton with interesting properties. The rules are simple. There is a one-dimensional array of cells (on or off). At each time step, the next state of each cell is the XOR of the cell's two current neighbours:\n\nThe cells have two states:\n1. on (1)\n2. off (0)\n\nState transitions:\n1. If Left neighbour = 1 and Right neighbour = 1, then Center's next state = 0.\n2. If Left neighbour = 1 and Right neighbour = 0, then Center's next state = 1.\n3. If Left neighbour = 0 and Right neighbour = 1, then Center's next state = 1.\n4. If Left neighbour = 0 and Right neighbour = 0, then Center's next state = 0.\n\nIn this circuit, create a 512-cell system (q[511:0]), and advance by one time step each clock cycle. The load input indicates the state of the system should be loaded with data[511:0]. Assume the boundaries (q[-1] and q[512]) are both zero (off).\nmodule top_module (\n  input clk,\n  input load,\n  input [511:0] data,\n  output reg [511:0] q);"}
{"task_id": "mt2015_eq2", "instruction": "Implement the Verilog module based on the following description. Assume that signals are positive clock/clk edge triggered unless otherwise stated.\nCreate a circuit that has two 2-bit inputs A[1:0] and B[1:0], and produces an output z. The value of z should be 1 if A = B, otherwise z should be 0.\nmodule top_module(\n\tinput [1:0] A,\n\tinput [1:0] B,\n\toutput z);\n"}
{"task_id": "gatesv100", "instruction": "Implement the Verilog module based on the following description. Assume that signals are positive clock/clk edge triggered unless otherwise stated.\nYou are given a 100-bit input vector in[99:0]. We want to know some relationships between each bit and its neighbour: \n// (1) out_both: Each bit of this output vector should indicate whether both the corresponding input bit and its neighbour to the left are '1'. For example, out_both[98] should indicate if in[98] and in[99] are both 1. Since in[99] has no neighbour to the left, the answer is obvious so we don't need to know out_both[99]. \n// (2) out_any: Each bit of this output vector should indicate whether any of the corresponding input bit and its neighbour to the right are '1'. For example, out_any[2] should indicate if either in[2] or in[1] are 1. Since in[0] has no neighbour to the right, the answer is obvious so we don't need to know out_any[0]. \n// (3) out_different: Each bit of this output vector should indicate whether the corresponding input bit is different from its neighbour to the left. For example, out_different[98] should indicate if in[98] is different from in[99]. For this part, treat the vector as wrapping around, so in[99]'s neighbour to the left is in[0].\n\nmodule top_module (\n\tinput [99:0] in,\n\toutput [98:0] out_both,\n\toutput [99:1] out_any,\n\toutput [99:0] out_different);\n"}
{"task_id": "m2014_q4a", "instruction": "Implement the Verilog module based on the following description. Assume that signals are positive clock/clk edge triggered unless otherwise stated.\nImplement a D latch using an always block.\n\nmodule top_module (\n\tinput d,\n\tinput ena,\n\toutput reg q);\n"}
{"task_id": "mux256to1v", "instruction": "Implement the Verilog module based on the following description. Assume that signals are positive clock/clk edge triggered unless otherwise stated.\nCreate a 4-bit wide, 256-to-1 multiplexer. The 256 4-bit inputs are all packed into a single 1024-bit input vector. sel=0 should select bits in[3:0], sel=1 selects bits in[7:4], sel=2 selects bits in[11:8], etc.\nmodule top_module (\n\tinput [1023:0] in,\n\tinput [7:0] sel,\n\toutput [3:0] out);\n"}
{"task_id": "mux9to1v", "instruction": "Implement the Verilog module based on the following description. Assume that signals are positive clock/clk edge triggered unless otherwise stated.\nCreate a 16-bit wide, 9-to-1 multiplexer. sel=0 chooses a, sel=1 chooses b, etc. For the unused cases (sel=9 to 15), set all output bits to '1'.\nmodule top_module (\n\tinput [15:0] a,\n\tinput [15:0] b,\n\tinput [15:0] c,\n\tinput [15:0] d,\n\tinput [15:0] e,\n\tinput [15:0] f,\n\tinput [15:0] g,\n\tinput [15:0] h,\n\tinput [15:0] i,\n\tinput [3:0] sel,\n\toutput reg [15:0] out);\n"}
{"task_id": "vectorgates", "instruction": "Implement the Verilog module based on the following description. Assume that signals are positive clock/clk edge triggered unless otherwise stated.\nBuild a circuit that has two 3-bit inputs that computes the bitwise-OR of the two vectors, the logical-OR of the two vectors, and the inverse (NOT) of both vectors. Place the inverse of b in the upper half of out_not (i.e., bits [5:3]), and the inverse of a in the lower half.\nmodule top_module(\n\tinput [2:0] a, \n\tinput [2:0] b, \n\toutput [2:0] out_or_bitwise,\n\toutput out_or_logical,\n\toutput [5:0] out_not);\n"}
{"task_id": "fsm3onehot", "instruction": "Implement the Verilog module based on the following description. Assume that signals are positive clock/clk edge triggered unless otherwise stated.\nThe following is the state transition table for a Moore state machine with one input, one output, and four states. Use the following one-hot state encoding: A=4'b0001, B=4'b0010, C=4'b0100, D=4'b1000. Derive state transition and output logic equations by inspection assuming a one-hot encoding. Implement only the state transition logic and output logic (the combinational logic portion) for this state machine.   \n\nThe state machine has the following states and their corresponding outputs: \n1. state A (out = 0).\n2. state B (out = 0).\n3. state C (out = 0).\n4. state D (out = 1).\n\nState transitions:\n1. From state A: If in = 0, then transition to state A. If in = 1, then transition to state B.\n2. From state B: If in = 0, then transition to state C. If in = 1, then transition to state B.\n3. From state C: If in = 0, then transition to state A. If in = 1, then transition to state D.\n4. From state D: If in = 0, then transition to state C. If in = 1, then transition to state B.\n\nmodule top_module (\n  input in,\n  input [3:0] state,\n  output reg [3:0] next_state,\n  output reg out);"}
{"task_id": "conditional", "instruction": "Implement the Verilog module based on the following description. Assume that signals are positive clock/clk edge triggered unless otherwise stated.\nGiven four unsigned numbers, find the minimum. Unsigned numbers can be compared with standard comparison operators (a < b). \nmodule top_module (\n\tinput [7:0] a,\n\tinput [7:0] b,\n\tinput [7:0] c,\n\tinput [7:0] d,\n\toutput reg [7:0] min);\n"}
{"task_id": "gates", "instruction": "Implement the Verilog module based on the following description. Assume that signals are positive clock/clk edge triggered unless otherwise stated.\nBuild a combinational circuit with two inputs, a and b. There are 7 outputs, each with a logic gate driving it: \n// (1) out_and: a and b \n// (2) out_or: a or b \n// (3) out_xor: a xor b \n// (4) out_nand: a nand b \n// (5) out_nor: a nor b \n// (6) out_xnor: a xnor b \n// (7) out_anotb: a and-not b\nmodule top_module (\n\tinput a,\n\tinput b,\n\toutput out_and,\n\toutput out_or,\n\toutput out_xor,\n\toutput out_nand,\n\toutput out_nor,\n\toutput out_xnor,\n\toutput out_anotb);\n"}
{"task_id": "kmap2", "instruction": "Implement the Verilog module based on the following description. Assume that signals are positive clock/clk edge triggered unless otherwise stated.\nImplement the circuit described by the Karnaugh map below.\n\nIf abcd is 0000, then out is 1.\nIf abcd is 0100, then out is 1.\nIf abcd is 1100, then out is 0.\nIf abcd is 1000, then out is 1.\nIf abcd is 0001, then out is 1.\nIf abcd is 0101, then out is 0.\nIf abcd is 1101, then out is 0.\nIf abcd is 1001, then out is 1.\nIf abcd is 0011, then out is 0.\nIf abcd is 0111, then out is 1.\nIf abcd is 1111, then out is 1.\nIf abcd is 1011, then out is 1.\nIf abcd is 0010, then out is 1.\nIf abcd is 0110, then out is 1.\nIf abcd is 1110, then out is 0.\nIf abcd is 1010, then out is 0.\n\nmodule top_module (\n\tinput a, \n\tinput b,\n\tinput c,\n\tinput d,\n\toutput reg out);\n"}
{"task_id": "2014_q3fsm", "instruction": "Implement the Verilog module based on the following description. Assume that signals are positive clock/clk edge triggered unless otherwise stated.\nConsider a finite state machine with inputs s and w. Assume that the FSM begins in a reset state called A, as depicted below. The FSM remains in state A as long as s = 0, and it moves to state B when s = 1. Once in state B the FSM examines the value of the input w in the next three clock cycles. If w = 1 in exactly two of these clock cycles, then the FSM has to set an output z to 1 in the following clock cycle. Otherwise z has to be 0. The FSM continues checking w for the next three clock cycles, and so on. Use as few states as possible. Note that the s input is used only in state A, so you need to consider just the w input. Assume reset is active high synchronous.\nmodule top_module (\n\tinput clk,\n\tinput reset,\n\tinput s,\n\tinput w,\n\toutput reg z);\n"}
{"task_id": "vector4", "instruction": "Implement the Verilog module based on the following description. Assume that signals are positive clock/clk edge triggered unless otherwise stated.\nOne common place to see a replication operator is when sign-extending a smaller number to a larger one, while preserving its signed value. This is done by replicating the sign bit (the most significant bit) of the smaller number to the left. For example, sign-extending 4'b0101 (5) to 8 bits results in 8'b00000101 (5), while sign-extending 4'b1101 (-3) to 8 bits results in 8'b11111101 (-3). Build a circuit that sign-extends an 8-bit number to 32 bits. This requires a concatenation of 24 copies of the sign bit (i.e., replicate bit[7] 24 times) followed by the 8-bit number itself.\nmodule top_module (\n\tinput [7:0] in,\n\toutput [31:0] out);\n"}
{"task_id": "m2014_q4k", "instruction": "Implement the Verilog module based on the following description. Assume that signals are positive clock/clk edge triggered unless otherwise stated.\nImplement a shift register with four D flops. Reset is active-low synchronous resettable.\nmodule top_module (\n\tinput clk,\n\tinput resetn,\n\tinput in,\n\toutput out);\n"}
{"task_id": "always_case2", "instruction": "Implement the Verilog module based on the following description. Assume that signals are positive clock/clk edge triggered unless otherwise stated.\nA priority encoder is a combinational circuit that, when given an input bit vector, outputs the position of the first 1 bit in the vector. For example, a 8-bit priority encoder given the input 8'b10010000 would output 3'd4, because bit[4] is first bit that is high. Build a 4-bit priority encoder. For this problem, if none of the input bits are high (i.e., input is zero), output zero. Note that a 4-bit number has 16 possible combinations.\nmodule top_module (\n\tinput [3:0] in,\n\toutput reg [1:0] pos);\n"}
{"task_id": "fsm2", "instruction": "Implement the Verilog module based on the following description. Assume that signals are positive clock/clk edge triggered unless otherwise stated.\nThis is a Moore state machine with two states, two inputs, and one output. Implement this state machine in Verilog. Reset is an active-high asynchronous reset to state OFF.\n\nThe state machine has the following states and their corresponding outputs: \n1. state OFF (out = 0).\n2. state ON (out = 1).\n\nState transitions:\n1. From state OFF: If j = 0, then transition to state OFF. If j = 1, then transition to state ON.\n2. From state ON: If k = 0, then transition to state ON. If k = 1, then transition to state OFF.\n\nmodule top_module (\n        input clk,\n        input j,\n        input k,\n        input areset,\n        output reg out);"}
{"task_id": "m2014_q4i", "instruction": "Implement the Verilog module based on the following description. Assume that signals are positive clock/clk edge triggered unless otherwise stated.\nBuild a circuit with no inputs and one output. That output should always drive 0 (or logic low).\nmodule top_module(\n\toutput out);\n"}
{"task_id": "step_one", "instruction": "Implement the Verilog module based on the following description. Assume that signals are positive clock/clk edge triggered unless otherwise stated.\nBuild a circuit with no inputs and one output. That output should always drive 1 (or logic high).\nmodule top_module(\n\toutput one);\n"}
{"task_id": "vector100r", "instruction": "Implement the Verilog module based on the following description. Assume that signals are positive clock/clk edge triggered unless otherwise stated.\nGiven a 100-bit input vector [99:0], reverse its bit ordering.\nmodule top_module (\n\tinput [99:0] in,\n\toutput reg [99:0] out);\n"}
{"task_id": "m2014_q4d", "instruction": "Implement the Verilog module based on the following description. Assume that signals are positive clock/clk edge triggered unless otherwise stated.\nImplement in Verilog the following circuit: A D flip-flop takes as input the output of a two-input XOR. The flip-flop is positive edge triggered by clk, but there is no reset. The XOR takes as input 'in' along with the output 'out' of the flip-flop.\nmodule top_module (\n\tinput clk,\n\tinput in,\n\toutput reg out);\n"}
{"task_id": "shift4", "instruction": "Implement the Verilog module based on the following description. Assume that signals are positive clock/clk edge triggered unless otherwise stated.\nBuild a 4-bit shift register (right shift), with asynchronous positive edge triggered areset, synchronous active high signals load, and enable. \n// (1) areset: Resets shift register to zero. \n// (2) load: Loads shift register with data[3:0] instead of shifting. \n// (3) ena: Shift right (q[3] becomes zero, q[0] is shifted out and disappears). \n// (4) q: The contents of the shift register. If both the load and ena inputs are asserted (1), the load input has higher priority. \n\nmodule top_module(\n\tinput clk,\n\tinput areset,\n\tinput load,\n\tinput ena,\n\tinput [3:0] data,\n\toutput reg [3:0] q);\n"}
{"task_id": "truthtable1", "instruction": "Implement the Verilog module based on the following description. Assume that signals are positive clock/clk edge triggered unless otherwise stated.\nCreate a combinational circuit that implements the truth table.\n\nVariables:\n1. x3 (input)\n2. x2 (input)\n3. x1 (input)\n4. f (output)\n\nRules:\n1. If x3=0, x2=0, x1=0, then f=0.\n2. If x3=0, x2=0, x1=1, then f=0.\n3. If x3=0, x2=1, x1=0, then f=1.\n4. If x3=0, x2=1, x1=1, then f=1.\n5. If x3=1, x2=0, x1=0, then f=0.\n6. If x3=1, x2=0, x1=1, then f=1.\n7. If x3=1, x2=1, x1=0, then f=0.\n8. If x3=1, x2=1, x1=1, then f=1.\n\nmodule top_module (\n        input x3,\n        input x2,\n        input x1,\n        output reg f);"}
{"task_id": "dff8ar", "instruction": "Implement the Verilog module based on the following description. Assume that signals are positive clock/clk edge triggered unless otherwise stated.\nCreate 8 D flip-flops with active high asynchronous reset. The output should be reset to 0. All DFFs should be triggered by the positive edge of clk.\nmodule top_module(\n\tinput clk,\n\tinput [7:0] d,\n\tinput areset,\n\toutput reg [7:0] q);\n"}
{"task_id": "gates100", "instruction": "Implement the Verilog module based on the following description. Assume that signals are positive clock/clk edge triggered unless otherwise stated.\nBuild a combinational circuit with 100 inputs, in[99:0]. There are 3 outputs: \n// (1) out_and: output of a 100-input AND gate. \n// (2) out_or: output of a 100-input OR gate. \n// (3) out_xor: output of a 100-input XOR gate.\n\n\nmodule top_module (\n\tinput [99:0] in,\n\toutput out_and,\n\toutput out_or,\n\toutput out_xor);\n"}
{"task_id": "hadd", "instruction": "Implement the Verilog module based on the following description. Assume that signals are positive clock/clk edge triggered unless otherwise stated.\nCreate a half adder. A half adder adds two bits (with no carry-in) and produces a sum and carry-out.\nmodule top_module (\n\tinput a,\n\tinput b,\n\toutput sum,\n\toutput cout);\n"}
{"task_id": "always_if2", "instruction": "Implement the Verilog module based on the following description. Assume that signals are positive clock/clk edge triggered unless otherwise stated.\nFix any and all bugs in this code:\n\n// module top_module (\n//     input      cpu_overheated,\n//     output reg shut_off_computer,\n//     input      arrived,\n//     input      gas_tank_empty,\n//     output reg keep_driving  ); //\n\n//     always @(*) begin\n//         if (cpu_overheated)\n//            shut_off_computer = 1;\n//     end\n\n//     always @(*) begin\n//         if (~arrived)\n//            keep_driving = ~gas_tank_empty;\n//     end\n\n// endmodule\n\nmodule top_module (\n\tinput cpu_overheated,\n\toutput reg shut_off_computer,\n\tinput arrived,\n\tinput gas_tank_empty,\n\toutput reg keep_driving\n);\n"}
{"task_id": "fsm2s", "instruction": "Implement the Verilog module based on the following description. Assume that signals are positive clock/clk edge triggered unless otherwise stated.\nThis is a Moore state machine with two states, two inputs, and one output. Implement this state machine in Verilog. Reset is an active-high synchronous reset to state OFF.\n\nThe state machine has the following states and their corresponding outputs: \n1. state OFF (out = 0).\n2. state ON (out = 1).\n\nState transitions:\n1. From state OFF: If j = 0, then transition to state OFF. If j = 1, then transition to state ON.\n2. From state ON: If k = 0, then transition to state ON. If k = 1, then transition to state OFF.\n\nmodule top_module (\n        input clk,\n        input j,\n        input k,\n        input reset,\n        output reg out);"}
{"task_id": "vector3", "instruction": "Implement the Verilog module based on the following description. Assume that signals are positive clock/clk edge triggered unless otherwise stated.\nGiven several input vectors, concatenate them together then split them up into several output vectors. There are six 5-bit input vectors: a, b, c, d, e, and f, for a total of 30 bits of input. There are four 8-bit output vectors: w, x, y, and z, for 32 bits of output. The output should be a concatenation of the input vectors followed by two 1 bits (the two 1 bits should be in the LSB positions).\nmodule top_module (\n\tinput [4:0] a,\n\tinput [4:0] b,\n\tinput [4:0] c,\n\tinput [4:0] d,\n\tinput [4:0] e,\n\tinput [4:0] f,\n\toutput [7:0] w,\n\toutput [7:0] x,\n\toutput [7:0] y,\n\toutput [7:0] z);\n"}
{"task_id": "circuit2", "instruction": "Implement the Verilog module based on the following description. Assume that signals are positive clock/clk edge triggered unless otherwise stated.\nThis is a combinational circuit. Read the simulation waveforms to determine what the circuit does, then implement it.\n\nIf a = 0, b = 1, c = 0, d = 1, then q = 1.\nIf a = 1, b = 0, c = 1, d = 1, then q = 0.\nIf a = 1, b = 0, c = 0, d = 1, then q = 1.\nIf a = 0, b = 0, c = 0, d = 1, then q = 0.\nIf a = 0, b = 0, c = 1, d = 1, then q = 1.\nIf a = 0, b = 1, c = 0, d = 0, then q = 0.\nIf a = 1, b = 0, c = 1, d = 0, then q = 1.\nIf a = 0, b = 0, c = 1, d = 0, then q = 0.\nIf a = 1, b = 1, c = 0, d = 0, then q = 1.\nIf a = 1, b = 1, c = 0, d = 1, then q = 0.\nIf a = 0, b = 1, c = 1, d = 0, then q = 1.\nIf a = 1, b = 0, c = 0, d = 0, then q = 0.\nIf a = 0, b = 1, c = 1, d = 1, then q = 0.\nIf a = 0, b = 0, c = 0, d = 0, then q = 1.\nIf a = 1, b = 1, c = 1, d = 0, then q = 0.\nIf a = 1, b = 1, c = 1, d = 1, then q = 1.\n\nmodule top_module (\n\tinput a, \n\tinput b, \n\tinput c, \n\tinput d,\n\toutput reg q);\n"}
{"task_id": "andgate", "instruction": "Implement the Verilog module based on the following description. Assume that signals are positive clock/clk edge triggered unless otherwise stated.\nCreate a module that implements an AND gate.\nmodule top_module(\n\tinput a, \n\tinput b,\n\toutput out);\n"}
{"task_id": "fsm1s", "instruction": "Implement the Verilog module based on the following description. Assume that signals are positive clock/clk edge triggered unless otherwise stated.\nThis is a Moore state machine with two states, one input, and one output. Implement this state machine in Verilog. The reset state is B and reset is active-high synchronous.\n\nThe state machine has the following states and their corresponding outputs: \n1. state A (out = 0).\n2. state B (out = 1).\n\nState transitions:\n1. From state A: If in = 0, then transition to state B. If in = 1, then transition to state A.\n2. From state B: If in = 0, then transition to state A. If in = 1, then transition to state B.\n\nmodule top_module (\n        input clk,\n        input in,\n        input reset,\n        output reg out);"}
{"task_id": "fadd", "instruction": "Implement the Verilog module based on the following description. Assume that signals are positive clock/clk edge triggered unless otherwise stated.\nCreate a full adder. A full adder adds three bits (including carry-in) and produces a sum and carry-out.\nmodule top_module (\n\tinput a,\n\tinput b,\n\tinput cin,\n\toutput cout,\n\toutput sum);\n"}
{"task_id": "m2014_q4g", "instruction": "Implement the Verilog module based on the following description. Assume that signals are positive clock/clk edge triggered unless otherwise stated.\nImplement in Verilog the following circuit: A two-input XNOR (connected to 'in1' and 'in2) has an output connected to the input of a two-input XOR. The second input of the XOR is 'in3.' The output of the XOR is 'out'.\nmodule top_module (\n\tinput in1,\n\tinput in2,\n\tinput in3,\n\toutput reg out);\n"}
{"task_id": "ece241_2014_q3", "instruction": "Implement the Verilog module based on the following description. Assume that signals are positive clock/clk edge triggered unless otherwise stated.\nFor the following Karnaugh map, give the circuit implementation using one 4-to-1 multiplexer and as many 2-to-1 multiplexers as required, but using as few as possible. You are not allowed to use any other logic gate and you must use _a_ and _b_ as the multiplexer selector inputs, as shown on the 4-to-1 multiplexer below.\n\nIf abcd is 0000, then out is 0.\nIf abcd is 0100, then out is 0.\nIf abcd is 1100, then out is 0.\nIf abcd is 1000, then out is 1.\nIf abcd is 0001, then out is 1.\nIf abcd is 0101, then out is 0.\nIf abcd is 1101, then out is 0.\nIf abcd is 1001, then out is 0.\nIf abcd is 0011, then out is 1.\nIf abcd is 0111, then out is 0.\nIf abcd is 1111, then out is 1.\nIf abcd is 1011, then out is 1.\nIf abcd is 0010, then out is 1.\nIf abcd is 0110, then out is 0.\nIf abcd is 1110, then out is 0.\nIf abcd is 1010, then out is 1.\n// Consider a block diagram with inputs 'c' and 'd' going into a module called \"top_module\". This \"top_module\" has four outputs, mux_in[3:0], that connect to a four input mux. The mux takes as input {a,b} and ab = 00 is connected to mux_in[0], ab=01 is connected to mux_in[1], and so in. You are implementing in Verilog just the portion labelled \"top_module\", such that the entire circuit (including the 4-to-1 mux) implements the K-map.\n\nmodule top_module (\n\tinput c,\n\tinput d,\n\toutput reg [3:0] mux_in);\n"}
{"task_id": "ece241_2014_q5b", "instruction": "Implement the Verilog module based on the following description. Assume that signals are positive clock/clk edge triggered unless otherwise stated.\nThe following diagram is a Mealy machine implementation of the 2's complementer. Implement in Verilog using one-hot encoding. Resets into state A and reset is asynchronous active-high.\n\nThe state machine has the following states and their corresponding outputs: \n1. state A (If x = 0, then z = 0. If x = 1, then z = 1).\n2. state B (If x = 0, then z = 1. If x = 1, then z = 0).\n\nState transitions:\n1. From state A: If x = 0, then transition to state A. If x = 1, then transition to state B.\n2. From state B: If x = 0, then transition to state B. If x = 1, then transition to state B.\n\nmodule top_module (\n        input clk,\n        input areset,\n        input x,\n        output reg z);"}
{"task_id": "circuit10", "instruction": "Implement the Verilog module based on the following description. Assume that signals are positive clock/clk edge triggered unless otherwise stated.\nThis is a sequential circuit. The circuit consists of combinational logic and one bit of memory (i.e., one flip-flop). The output of the flip-flop has been made observable through the output state.\n\n// Read the simulation waveforms to determine what the circuit does, then implement it.\n\nTime 0ns: clk = 0, a = 1, b = x, state = x, q = x.\nTime 5ns: clk = 1, a = 1, b = x, state = x, q = x.\nTime 10ns: clk = 0, a = 0, b = 0, state = x, q = x.\nTime 15ns: clk = 1, a = 0, b = 0, state = 0, q = 0.\nTime 20ns: clk = 0, a = 0, b = 0, state = 0, q = 0.\nTime 25ns: clk = 1, a = 0, b = 0, state = 0, q = 0.\nTime 30ns: clk = 0, a = 0, b = 0, state = 0, q = 0.\nTime 35ns: clk = 1, a = 0, b = 0, state = 0, q = 0.\nTime 40ns: clk = 0, a = 0, b = 0, state = 0, q = 0.\nTime 45ns: clk = 1, a = 0, b = 1, state = 0, q = 1.\nTime 50ns: clk = 0, a = 0, b = 1, state = 0, q = 1.\nTime 55ns: clk = 1, a = 1, b = 0, state = 0, q = 1.\nTime 60ns: clk = 0, a = 1, b = 0, state = 0, q = 1.\nTime 65ns: clk = 1, a = 1, b = 1, state = 0, q = 0.\nTime 70ns: clk = 0, a = 1, b = 1, state = 0, q = 0.\nTime 75ns: clk = 1, a = 0, b = 0, state = 1, q = 1.\nTime 80ns: clk = 0, a = 0, b = 0, state = 1, q = 1.\nTime 85ns: clk = 1, a = 1, b = 1, state = 0, q = 0.\nTime 90ns: clk = 0, a = 1, b = 1, state = 0, q = 0.\nTime 95ns: clk = 1, a = 1, b = 1, state = 1, q = 1.\nTime 100ns: clk = 0, a = 1, b = 1, state = 1, q = 1.\nTime 105ns: clk = 1, a = 1, b = 1, state = 1, q = 1.\nTime 110ns: clk = 0, a = 1, b = 1, state = 1, q = 1.\nTime 115ns: clk = 1, a = 1, b = 0, state = 1, q = 0.\nTime 120ns: clk = 0, a = 1, b = 0, state = 1, q = 0.\nTime 125ns: clk = 1, a = 0, b = 1, state = 1, q = 0.\nTime 130ns: clk = 0, a = 0, b = 1, state = 1, q = 0.\nTime 135ns: clk = 1, a = 0, b = 0, state = 1, q = 1.\nTime 140ns: clk = 0, a = 0, b = 0, state = 1, q = 1.\nTime 145ns: clk = 1, a = 0, b = 0, state = 0, q = 0.\nTime 150ns: clk = 0, a = 0, b = 0, state = 0, q = 0.\nTime 155ns: clk = 1, a = 0, b = 0, state = 0, q = 0.\nTime 160ns: clk = 0, a = 0, b = 0, state = 0, q = 0.\nTime 165ns: clk = 1, a = 0, b = 0, state = 0, q = 0.\nTime 170ns: clk = 0, a = 0, b = 0, state = 0, q = 0.\nTime 175ns: clk = 1, a = 0, b = 0, state = 0, q = 0.\nTime 180ns: clk = 0, a = 0, b = 0, state = 0, q = 0.\nTime 185ns: clk = 1, a = 0, b = 0, state = 0, q = 0.\nTime 190ns: clk = 0, a = 0, b = 0, state = 0, q = 0.\n\nmodule top_module (\n\tinput clk,\n\tinput a,\n\tinput b,\n\toutput reg q,\n\toutput reg state);\n"}
{"task_id": "2012_q1g", "instruction": "Implement the Verilog module based on the following description. Assume that signals are positive clock/clk edge triggered unless otherwise stated.\nConsider the function f shown in the Karnaugh map below. Implement this function.\nIf x[4]x[3]x[2]x[1] is 0000, then out is 1.\nIf x[4]x[3]x[2]x[1] is 0010, then out is 0.\nIf x[4]x[3]x[2]x[1] is 0011, then out is 0.\nIf x[4]x[3]x[2]x[1] is 0001, then out is 1.\nIf x[4]x[3]x[2]x[1] is 1000, then out is 0.\nIf x[4]x[3]x[2]x[1] is 1010, then out is 0.\nIf x[4]x[3]x[2]x[1] is 1011, then out is 0.\nIf x[4]x[3]x[2]x[1] is 1001, then out is 0.\nIf x[4]x[3]x[2]x[1] is 1100, then out is 1.\nIf x[4]x[3]x[2]x[1] is 1110, then out is 1.\nIf x[4]x[3]x[2]x[1] is 1111, then out is 1.\nIf x[4]x[3]x[2]x[1] is 1101, then out is 0.\nIf x[4]x[3]x[2]x[1] is 0100, then out is 1.\nIf x[4]x[3]x[2]x[1] is 0110, then out is 1.\nIf x[4]x[3]x[2]x[1] is 0111, then out is 0.\nIf x[4]x[3]x[2]x[1] is 0101, then out is 1.\n\nmodule top_module (\n\tinput [4:1] x,\n\toutput reg f);\n"}
{"task_id": "fsm_hdlc", "instruction": "Implement the Verilog module based on the following description. Assume that signals are positive clock/clk edge triggered unless otherwise stated.\nSynchronous HDLC framing involves decoding a continuous bit stream of data to look for bit patterns that indicate the beginning and end of frames (packets). Seeing exactly 6 consecutive 1s (i.e., 01111110) is a \"flag\" that indicate frame boundaries. To avoid the data stream from accidentally containing \"flags\", the sender inserts a zero after every 5 consecutive 1s which the receiver must detect and discard. We also need to signal an error if there are 7 or more consecutive 1s. Create a Moore-type finite state machine to recognize these three sequences:\n\n// (1) 0111110: Signal a bit needs to be discarded (disc).\n// (2) 01111110: Flag the beginning/end of a frame (flag).\n// (3) 01111111...: Error (7 or more 1s) (err).\n\n// When the FSM is reset, it should be in a state that behaves as though the previous input were 0. The reset signal is active high synchronous. The output signals should be asserted for a complete cycle beginning on the clock cycle after the condition occurs.\nmodule top_module (\n\tinput clk,\n\tinput reset,\n\tinput in,\n\toutput disc,\n\toutput flag,\n\toutput err);\n"}
{"task_id": "review2015_fancytimer", "instruction": "Implement the Verilog module based on the following description. Assume that signals are positive clock/clk edge triggered unless otherwise stated.\nWe want to create a timer with one input that:\n\n// (1) is started when a particular input pattern (1101) is detected,\n// (2) shifts in 4 more bits to determine the duration to delay,\n// (3) waits for the counters to finish counting, and\n// (4) notifies the user and waits for the user to acknowledge the timer.\n\n// The serial data is available on the data input pin. When the pattern 1101 is received, the circuit must then shift in the next 4 bits, most-significant-bit first. These 4 bits determine the duration of the timer delay, referred to as delay[3:0]. After that, the state machine asserts its counting output to indicate it is counting. Once the 1101 and delay[3:0] have been read, the circuit no longer looks at the data input until it resumes searching after everything else is done.\n\n// The state machine must count for exactly (delay[3:0] + 1) * 1000 clock cycles. e.g., delay=0 means count 1000 cycles, and delay=5 means count 6000 cycles. Also output the current remaining time. This should be equal to delay for 1000 cycles, then delay-1 for 1000 cycles, and so on until it is 0 for 1000 cycles. \n\n// When the circuit isn't counting, the count[3:0] output is don't-care (whatever value is convenient for you to implement). At that point, the circuit must assert done to notify the user the timer has timed out, and waits until input ack is 1 before being reset to look for the next occurrence of the start sequence (1101).\n\n// The circuit should reset into a state where it begins searching for the input sequence 1101. The reset signal is active high synchronous. \n\nmodule top_module(\n\tinput wire clk,\n\tinput wire reset,\n\tinput wire data,\n    output wire [3:0] count,\n    output reg counting,\n    output reg done,\n    input wire ack );\n"}
{"task_id": "ece241_2013_q4", "instruction": "Implement the Verilog module based on the following description. Assume that signals are positive clock/clk edge triggered unless otherwise stated.\nA large reservior of water serves several users. In order to keep the level of water succificently high, three sensors are placed vertically at 5-inch intervals. When the water level is above the highest sensor s[3], the input flow rate should be zero. When the level is below the lowest sensor s[1], the flow rate should be at maximum (both Nominal flow valve and Supplemental flow valve opened). The flow rate when the level is between the upper and lower sensors is determined by two factors: the water level and the level previous to the last sensor change. Each water level has a nominal flow rate associated with it as show in the table below. If the sensor change indicates that the previous level was lower than the current level, the flow rate should be increased by opening the Supplemental flow valve (controlled by dfr).\n\nVariables:\n1. s[3:1] (input, sensor)\n2. fr1 (output, Nominal Flow Rate)\n3. fr2 (output, Nominal Flow Rate)\n4. fr3 (output, Nominal Flow Rate)\n5. dfr (output, Supplemental Flow Valve)\n\nRules:\n1. If the water level is \"Above s[3]\" (sensors asserted: s[1]=1, s[2]=1, s[3]=1), then no inputs are asserted (fr1=0, fr2=0, fr3=0).\n2. If the water level is \"Between s[3] and s[2]\" (sensors asserted: s[1]=1, s[2]=1, s[3]=0), then assert fr1 (fr1=1, fr2=0, fr3=0).\n3. If the water level is \"Between s[2] and s[1]\" (sensors asserted: s[1]=1, s[2]=0, s[3]=0), then assert fr1 and fr2 (fr1=1, fr2=1, fr3=0).\n4. If the water level is \"Below s[1]\" (no sensors asserted: s[1]=0, s[2]=0, s[3]=0), then assert fr1, fr2, and fr3 (fr1=1, fr2=1, fr3=1).\n\nAlso include an active-high synchronous reset that resets the state machine to a state equivalent to if the water level had been low for a long time (no sensors asserted, and all four outputs asserted: fr1=1, fr2=1, fr3=1, dfr=1).\nmodule top_module (\n        input clk,\n        input reset,\n        input [3:1] s,\n        output reg fr3,\n        output reg fr2,\n        output reg fr1,\n        output reg dfr);"}
{"task_id": "fsm_serial", "instruction": "Implement the Verilog module based on the following description. Assume that signals are positive clock/clk edge triggered unless otherwise stated.\nIn many (older) serial communications protocols, each data byte is sent along with a start bit and a stop bit, to help the receiver delimit bytes from the stream of bits. One common scheme is to use one start bit (0), 8 data bits, and 1 stop bit (1). The line is also at logic 1 when nothing is being transmitted (idle). Design a finite state machine that will identify when bytes have been correctly received when given a stream of bits. It needs to identify the start bit, wait for all 8 data bits, then verify that the stop bit was correct. If the stop bit does not appear when expected, the FSM must wait until it finds a stop bit before attempting to receive the next byte. Include a active-high synchronous reset. Note that the serial protocol sends the least significant bit first.\nmodule top_module (\n\tinput clk,\n\tinput in,\n\tinput reset,\n\toutput done);\n"}
{"task_id": "fsm_serialdata", "instruction": "Implement the Verilog module based on the following description. Assume that signals are positive clock/clk edge triggered unless otherwise stated.\nIn many (older) serial communications protocols, each data byte is sent along with a start bit and a stop bit, to help the receiver delimit bytes from the stream of bits. One common scheme is to use one start bit (0), 8 data bits, and 1 stop bit (1). The line is also at logic 1 when nothing is being transmitted (idle). Design a finite state machine that will identify when bytes have been correctly received when given a stream of bits. It needs to identify the start bit, wait for all 8 data bits, then verify that the stop bit was correct. The module will also output the correctly-received data byte. out_byte needs to be valid when done is 1, and is don't-care otherwise.If the stop bit does not appear when expected, the FSM must wait until it finds a stop bit before attempting to receive the next byte. Include a active-high synchronous reset. Note that the serial protocol sends the least significant bit first. It should assert done each time it finds a stop bit.\nmodule top_module (\n\tinput clk,\n\tinput in,\n\tinput reset,\n\toutput [7:0] out_byte,\n\toutput done);\n"}
{"task_id": "gshare", "instruction": "Implement the Verilog module based on the following description. Assume that signals are positive clock/clk edge triggered unless otherwise stated.\nBuild a gshare branch predictor with 7-bit pc and 7-bit global history, hashed (using xor) into a 7-bit index. This index accesses a 128-entry table of two-bit saturating counters. The branch predictor should contain a 7-bit global branch history register. The branch predictor has two sets of interfaces: One for doing predictions and one for doing training. The prediction interface is used in the processor's Fetch stage to ask the branch predictor for branch direction predictions for the instructions being fetched. Once these branches proceed down the pipeline and are executed, the true outcomes of the branches become known. The branch predictor is then trained using the actual branch direction outcomes. \n// When a branch prediction is requested (predict_valid = 1) for a given pc, the branch predictor produces the predicted branch direction and state of the branch history register used to make the prediction. The branch history register is then updated (at the next positive clock edge) for the predicted branch. \n// When training for a branch is requested (train_valid = 1), the branch predictor is told the pc and branch history register value for the branch that is being trained, as well as the actual branch outcome and whether the branch was a misprediction (needing a pipeline flush). Update the pattern history table (PHT) to train the branch predictor to predict this branch more accurately next time. In addition, if the branch being trained is mispredicted, also recover the branch history register to the state immediately after the mispredicting branch completes execution.\n// If training for a misprediction and a prediction (for a different, younger instruction) occurs in the same cycle, both operations will want to modify the branch history register. When this happens, training takes precedence, because the branch being predicted will be discarded anyway. If training and prediction of the same PHT entry happen at the same time, the prediction sees the PHT state before training because training only modifies the PHT at the next positive clock edge. The following timing diagram shows the timing when training and predicting PHT entry 0 at the same time. The training request at cycle 4 changes the PHT entry state in cycle 5, but the prediction request in cycle 4 outputs the PHT state at cycle 4, without considering the effect of the training request in cycle 4. Reset is asynchronous active-high.\nmodule top_module(\n\tinput clk,\n\tinput areset, \n\n\tinput predict_valid,\n\tinput [6:0] predict_pc,\n\toutput predict_taken, \n\toutput [6:0] predict_history,\n\n\tinput train_valid,\n\tinput train_taken,\n\tinput train_mispredicted,\n\tinput [6:0] train_history, \n\tinput [6:0] train_pc);\n"}
{"task_id": "lemmings4", "instruction": "Implement the Verilog module based on the following description. Assume that signals are positive clock/clk edge triggered unless otherwise stated.\nThe game Lemmings involves critters with fairly simple brains. So simple that we are going to model it using a finite state machine. In the Lemmings' 2D world, Lemmings can be in one of two states: walking left (walk_left is 1) or walking right (walk_right is 1). It will switch directions if it hits an obstacle. In particular, if a Lemming is bumped on the left (by receiving a 1 on bump_left), it will walk right. If it's bumped on the right (by receiving a 1 on bump_right), it will walk left. If it's bumped on both sides at the same time, it will still switch directions. \n// In addition to walking left and right and changing direction when bumped, when ground=0, the Lemming will fall and say \"\"aaah!\"\". When the ground reappears (ground=1), the Lemming will resume walking in the same direction as before the fall. Being bumped while falling does not affect the walking direction, and being bumped in the same cycle as ground disappears (but not yet falling), or when the ground reappears while still falling, also does not affect the walking direction.\n// In addition to walking and falling, Lemmings can sometimes be told to do useful things, like dig (it starts digging when dig=1). A Lemming can dig if it is currently walking on ground (ground=1 and not falling), and will continue digging until it reaches the other side (ground=0). At that point, since there is no ground, it will fall (aaah!), then continue walking in its original direction once it hits ground again. As with falling, being bumped while digging has no effect, and being told to dig when falling or when there is no ground is ignored. (In other words, a walking Lemming can fall, dig, or switch directions. If more than one of these conditions are satisfied, fall has higher precedence than dig, which has higher precedence than switching directions.)\n// Although Lemmings can walk, fall, and dig, Lemmings aren't invulnerable. If a Lemming falls for too long then hits the ground, it can splatter. In particular, if a Lemming falls for more than 20 clock cycles then hits the ground, it will splatter and cease walking, falling, or digging (all 4 outputs become 0), forever (Or until the FSM gets reset). There is no upper limit on how far a Lemming can fall before hitting the ground. Lemmings only splatter when hitting the ground; they do not splatter in mid-air.\n// Implement a Moore state machine that models this behaviour. areset is positive edge triggered asynchronous reseting the Lemming machine to walk left.\nmodule top_module (\n\tinput clk,\n\tinput areset,\n\tinput bump_left,\n\tinput bump_right,\n\tinput ground,\n\tinput dig,\n\toutput walk_left,\n\toutput walk_right,\n\toutput aaah,\n\toutput digging);\n"}
{"task_id": "review2015_fsm", "instruction": "Implement the Verilog module based on the following description. Assume that signals are positive clock/clk edge triggered unless otherwise stated.\nWe want to create a timer that:\n// (1) is started when a particular pattern (1101) is detected,\n// (2) shifts in 4 more bits to determine the duration to delay,\n// (3) waits for the counters to finish counting, and\n// (4) notifies the user and waits for the user to acknowledge the timer.\n// In this problem, implement just the finite-state machine that controls the timer. The data path (counters and some comparators) are not included here.\n// The serial data is available on the data input pin. When the pattern 1101 is received, the state machine must then assert output shift_ena for exactly 4 clock cycles. After that, the state machine asserts its counting output to indicate it is waiting for the counters, and waits until input done_counting is high.At that point, the state machine must assert done to notify the user the timer has timed out, and waits until input ack is 1 before being reset to look for the next occurrence of the start sequence (1101). The state machine should have a active high synchronous reset, setting the state to where it begins searching for the input sequence 1101.\nmodule top_module(\n\tinput clk,\n\tinput reset,\n\tinput data,\n    output reg shift_ena,\n    output reg counting,\n    input done_counting,\n    output reg done,\n    input ack );\n"}
{"task_id": "conwaylife", "instruction": "Implement the Verilog module based on the following description. Assume that signals are positive clock/clk edge triggered unless otherwise stated.\nThe \"game\" is played on a two-dimensional grid of cells, where each cell is either 1 (alive) or 0 (dead). At each time step, each cell changes state depending on how many neighbours it has:\n// (1) 0-1 neighbour: Cell becomes 0.\n// (2) 2 neighbours: Cell state does not change.\n// (3) 3 neighbours: Cell becomes 1.\n// (4) 4+ neighbours: Cell becomes 0.\n// The game is formulated for an infinite grid. In this circuit, we will use a 16x16 grid. To make things more interesting, we will use a 16x16 toroid, where the sides wrap around to the other side of the grid. For example, the corner cell (0,0) has 8 neighbours: (15,1), (15,0), (15,15), (0,1), (0,15), (1,1), (1,0), and (1,15). The 16x16 grid is represented by a length 256 vector, where each row of 16 cells is represented by a sub-vector: q[15:0] is row 0, q[31:16] is row 1, etc. \n// (1) load: Loads data into q at the next clock edge, for loading initial state. Active high synchronous.\n// (2) q: The 16x16 current state of the game, updated every clock cycle.\n// The game state should advance by one timestep every clock cycle.\nmodule top_module(\n\tinput clk,\n\tinput load,\n\tinput [255:0] data,\n\toutput reg [255:0] q);\n"}
{"task_id": "lemmings3", "instruction": "Implement the Verilog module based on the following description. Assume that signals are positive clock/clk edge triggered unless otherwise stated.\nThe game Lemmings involves critters with fairly simple brains. So simple that we are going to model it using a finite state machine. In the Lemmings' 2D world, Lemmings can be in one of two states: walking left (walk_left is 1) or walking right (walk_right is 1). It will switch directions if it hits an obstacle. In particular, if a Lemming is bumped on the left (by receiving a 1 on bump_left), it will walk right. If it's bumped on the right (by receiving a 1 on bump_right), it will walk left. If it's bumped on both sides at the same time, it will still switch directions. \n// In addition to walking left and right and changing direction when bumped, when ground=0, the Lemming will fall and say \"aaah!\". When the ground reappears (ground=1), the Lemming will resume walking in the same direction as before the fall. Being bumped while falling does not affect the walking direction, and being bumped in the same cycle as ground disappears (but not yet falling), or when the ground reappears while still falling, also does not affect the walking direction.\n// In addition to walking and falling, Lemmings can sometimes be told to do useful things, like dig (it starts digging when dig=1). A Lemming can dig if it is currently walking on ground (ground=1 and not falling), and will continue digging until it reaches the other side (ground=0). At that point, since there is no ground, it will fall (aaah!), then continue walking in its original direction once it hits ground again. As with falling, being bumped while digging has no effect, and being told to dig when falling or when there is no ground is ignored. (In other words, a walking Lemming can fall, dig, or switch directions. If more than one of these conditions are satisfied, fall has higher precedence than dig, which has higher precedence than switching directions.)\n// Implement a Moore state machine that models this behaviour. areset is positive edge triggered asynchronous reseting the Lemming machine to walk left.\nmodule top_module (\n\tinput clk,\n\tinput areset,\n\tinput bump_left,\n\tinput bump_right,\n\tinput ground,\n\tinput dig,\n\toutput walk_left,\n\toutput walk_right,\n\toutput aaah,\n\toutput digging);\n"}
{"task_id": "count_clock", "instruction": "Implement the Verilog module based on the following description. Assume that signals are positive clock/clk edge triggered unless otherwise stated.\nCreate a set of counters suitable for use as a 12-hour clock (with am/pm indicator). Your counters are clocked by a fast-running clk, with a pulse on ena whenever your clock should increment (i.e., once per second, while \"clk\" is much faster than once per second). The signal \"pm\" is asserted if the clock is PM, or is otherwise AM. hh, mm, and ss are two BCD (Binary-Coded Decimal) digits each for hours (01-12), minutes (00-59), and seconds (00-59). Reset is the active high synchronous signal that resets the clock to \"12:00 AM.\" Reset has higher priority than enable and can occur even when not enabled.\nmodule top_module(\n\tinput clk,\n\tinput reset,\n\tinput ena,\n\toutput reg pm,\n\toutput reg [7:0] hh,\n\toutput reg [7:0] mm,\n\toutput reg [7:0] ss);\n"}
{"task_id": "lemmings2", "instruction": "Implement the Verilog module based on the following description. Assume that signals are positive clock/clk edge triggered unless otherwise stated.\nThe game Lemmings involves critters with fairly simple brains. So simple that we are going to model it using a finite state machine. In the Lemmings' 2D world, Lemmings can be in one of two states: walking left (walk_left is 1) or walking right (walk_right is 1). It will switch directions if it hits an obstacle. In particular, if a Lemming is bumped on the left (by receiving a 1 on bump_left), it will walk right. If it's bumped on the right (by receiving a 1 on bump_right), it will walk left. If it's bumped on both sides at the same time, it will still switch directions. \n// In addition to walking left and right and changing direction when bumped, when ground=0, the Lemming will fall and say \"aaah!\". When the ground reappears (ground=1), the Lemming will resume walking in the same direction as before the fall. Being bumped while falling does not affect the walking direction, and being bumped in the same cycle as ground disappears (but not yet falling), or when the ground reappears while still falling, also does not affect the walking direction.\n// Implement a Moore state machine that models this behaviour. areset is positive edge triggered asynchronous reseting the Lemming machine to walk left.\nmodule top_module (\n\tinput clk,\n\tinput areset,\n\tinput bump_left,\n\tinput bump_right,\n\tinput ground,\n\toutput walk_left,\n\toutput walk_right,\n\toutput aaah);\n"}
{"task_id": "countbcd", "instruction": "Implement the Verilog module based on the following description. Assume that signals are positive clock/clk edge triggered unless otherwise stated.\nBuild a 4-digit BCD (binary-coded decimal) counter. Each decimal digit is encoded using 4 bits: q[3:0] is the ones digit, q[7:4] is the tens digit, etc. For digits [3:1], also output an enable signal indicating when each of the upper three digits should be incremented. Include a synchronous active-high reset.\nmodule top_module(\n\tinput clk,\n\tinput reset,\n\toutput [3:1] ena,\n\toutput reg [15:0] q);\n"}
